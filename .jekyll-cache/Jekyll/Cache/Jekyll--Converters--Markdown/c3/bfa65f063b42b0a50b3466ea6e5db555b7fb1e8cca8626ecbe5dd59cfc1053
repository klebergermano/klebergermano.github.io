I"◊<p>Arquitetura de Software come√ßou a surgir no final dos anos 60 quando ci√™ntistas come√ßaram a enfatizar a import√¢ncia de se projetar e estruturar um software antes de se come√ßar o seu desenvolvimento. tendo sida melhor definida e aceita no final dos anos 80 e inicio dos anos 90.
O termo faz um paralelo com a ‚ÄúArquitetura‚Äù que tem suas especifica√ß√µes de constru√ß√£o e projeto escritas em uma planta arquitet√¥nica. Trazendo para o mundo do software basicamente seriam as nossas especifica√ß√µes do projeto e suas rela√ß√µes tecnol√≥gicas.</p>

<p>Ou seja a Aruitetura de Software √© a compreens√£o de como esse sistema deve ser organizado, como ele sera montado e como ele irar se comunicar com outros sistemas, incluindo tamb√©m suas regras, limita√ß√µes, etc.</p>

<p>Esse processo pode ser considerado a segunda etapa no desenvolvimento de um Software vindo logo ap√≥s a coleta de informa√ß√µes e requerimentos das partes interessadas no projeto ou seja os stackholders.</p>

<p>Voc√™ tamb√©m pode conferir a defini√ß√£o padr√£o sobre Arquitetura de Softwre da International Organization for Standardization (ISO) e o Institute of Electrical and Eletronics Engineers (IEEE), que √© a ISO/IEC/IEEE 42010:2011 que determina o que √© Arquitetura de Software.</p>

<h2 id="arquitetura-de-software-e-os-design-patterns">Arquitetura de Software e os Design Patterns</h2>

<p>Atualmente a Aplica√ß√£o Arquitetural inclui (mas n√£o se limitam) a escolha das solu√ß√µes do projeto como os Frameworks que ser√£o usados padr√µes de Design a serem implementados, abaixo segue uma pequena lista com alguns desse Design Patterns.</p>

<h3 id="arquitetura-em-camadas-layered-pattern">Arquitetura em camadas (Layered pattern)</h3>

<p>Organiza um sistema de conjunto em camadas que podem ser desconstru√≠das em diferentes servi√ßos, trazendo um modelo incremental de desenvolvimento. Os casos mais comuns para o uso desse padr√£o s√£o em software de e-commerce e desktop.</p>

<h3 id="arquitetura-cliente-servidor-client-server-pattern">Arquitetura cliente-servidor (Client-server pattern)</h3>

<p>Estilo organizado em servi√ßos combinando dados do cliente e do servidor. Para isso, √© primordial que o cliente disponibilize uma rede de acesso √†s informa√ß√µes. Este cen√°rio √© um dos mais conhecidos na rotina das pessoas, j√° que podem ser aplicativos banc√°rios e e-mail.</p>

<h3 id="arquitetura-mvc-model-view-controller-pattern">Arquitetura MVC (Model-view-controller pattern)</h3>

<p>Distribu√≠do em tr√™s camadas (Modelo, Vis√£o e Controle), este padr√£o √© um dos mais comuns para o online, porque traz um modelo interativo de sistema.</p>

<h3 id="arquitetura-de-microsservi√ßos-microservices-pattern">Arquitetura de microsservi√ßos (Microservices pattern)</h3>

<p>Este padr√£o utiliza m√∫ltiplos servi√ßos e componentes para desenvolver uma estrutura modular favorecida. Hoje, √© um dos modelos preferidos dos desenvolvedores e arquitetos de software por possibilitar a escalabilidade e independ√™ncia dos m√≥dulos ‚Äì que at√© podem utilizar diferentes linguagens e programa√ß√µes.</p>

<p>Esses s√£o conceitos gerais, a aplica√ß√£o hoje em dia vai muito alem de seus termos, temos por isso a profiss√£o Arquiteto de Software onde este tem como dever justamente o projeto do software a ser montado, esse profissional deve levar em considera√ß√£o: custos, manuten√ß√£o, disponibilidade tecnol√≥gica, impacto direto e indereto sobre os stackholders, etc, etc, etc.</p>

<h3 id="algumas-considera√ß√µes">Algumas Considera√ß√µes</h3>

<p>As defini√ß√µes do termo <span>Arquitetura de Software</span> al√©m de extensas tamb√©m s√£o muitas vezes subjetivas, ou seja, elas d√£o margem para interpreta√ß√µes pessoais sobre suas defini√ß√µes e conceitos o que toram muitas aspectos uma quest√£ode de consenso ou mera opni√£o.</p>

<p>Foras essas especificidade acredito que podemos resumir esse conceito como:</p>

<p><span>Arquitetura de Software √© a disciplina que cuida do ato de se projetar um software levando em considera√ß√£o a solu√ß√£o de possiveis problemas, usabilidade, reusabilidade, manuten√ß√£o, tecnologias a serem aplicadas e o impacto dessas escolhas no resultado final do projeto, bem como em seus envolvidos.</span></p>

<!--

#######################

DIferen√ßa entre Arquitetura de Software e Design de Software

##########################

Requiriments Engineering -> Analysis -> Design -> Development -> Testing -> Acceptance -> Deployment -> Maintenance and Update.
Fonte: https://youtu.be/lTkL1oIMiaU?t=145


Best explication

-->
:ET