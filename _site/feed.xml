<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-16T16:35:03-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Kleber Germano</title><subtitle>Magic stuff about programming.</subtitle><entry xml:lang="pt"><title type="html">Introdução a Informática</title><link href="http://localhost:4000/inform%C3%A1tica/2022/03/20/introduction-to-computing.html" rel="alternate" type="text/html" title="Introdução a Informática" /><published>2022-03-20T00:00:00-03:00</published><updated>2022-03-20T00:00:00-03:00</updated><id>http://localhost:4000/inform%C3%A1tica/2022/03/20/introduction-to-computing</id><content type="html" xml:base="http://localhost:4000/inform%C3%A1tica/2022/03/20/introduction-to-computing.html"><![CDATA[<!---------------------------------------------------------------------------->
<!---------------------------------------------------------------------------->
<!----------------------------------------------------------------------------> 


<div id='bg_content'>

    <div class='block_content'>
        <h2>Fundamentos da Informática</h2>
    <p class="text_with_img_bottom">
        Para iniciarmos nossos estudos sobre informática, primeiro devemos entender melhor o que esse termo significa, onde temos a seguinte definição: “A Informática é a ciência que estuda o tratamento automático da informação; utilizando para esse fim dispositivos eletrônicos, sendo esses os que chamamos de computadores”. 
                O termo “Informática” tem sua origem em 1962 na França, sendo a contração das palavras Information automatique (Informação automática).
        <img src='/assets/img/posts/introduction-to-computing/image3.jpeg'/>
    </p>
    <!--excerpt-->
    <p >
        Vamos agora olhar a definição de mais três palavras: Automática, Dados, Informação. Assim poderemos compreender melhor o que “Informação Automática” realmente significa. 
    </p>   
        <ul> 
            <li>
                Automática: “Aquilo que acontece sem precisarmos interferir, ou seja acontece por si só”.
                Ex.: <i>“Basta clicar em um botão e a máquina faz tudo automaticamente”.</i>
            </li>
            <li>
                Dados: “São ideias ou fatos em sua forma bruta, que por si só não conduzem a compreensão de determinada situação”.
                Ex.: “as notas parciais 7.0 e 4.0 de um aluno”.
            </li>    
            <li class="text_with_img_bottom">
            Informação: “Dados que foram transformados, manipulados e organizados que tem valor para a tomada de decisões”.
                Ex.: “O aluno que obteve as notas 4.0 e 7.0 está reprovado por não ter atingido a média 6.0”.
          </li>
          <img class='img_center' src='/assets/img/posts/introduction-to-computing/image4.png'/>

    </ul>

<p>

        Note que no nosso último exemplo as notas 4.0 e 7.0 do aluno foram nossos dados e a partir disso tivemos a informação de que ele está reprovado, nesse caso poderíamos ainda utilizar um computador para que sempre pegue as duas notas e tire a média de cada aluno, assim aprovando ou os reprovando automaticamente.
                
                Agora que sabemos que Informática é o ato de transformar dados em informação de maneira automática, precisamos passar a entender melhor as máquinas que tornam isso possível; os computadores.
            </p>
 </div>
    <div class='block_content'>
        <h2>Mas afinal o que é um Computador?</h2>
        <p>
            Podemos definir o computador como uma máquina que a partir de instruções adequadas é capaz de realizar uma grande gama de tarefas (Processamento de Dados), com alta velocidade e precisão.
                        Uma das grandes características dos computadores está no fato de serem utilizados para uma grande variedade de tarefas, ou seja, diferentemente de um refrigerador ou de um forno de micro-ondas, que possuem um propósito bem definido, um computador pode ser utilizado para: digitar um texto, navegar na Internet, ouvir músicas, ver filmes, acompanhar investimentos, projetar edificações, publicar notícias, etc.
                        Além de suas diversas finalidades os computadores ainda possuem diferentes formatos, tamanhos, e capacidades, assim quando falamos em computador, podemos estar nos referindo ao computador de bordo de um veículo, a um celular, um notebook, a uma máquina que controla a temperatura de uma caldeira em uma indústria ou até mesmo a supercomputadores, que são grandes computadores com uma imensa capacidade de processar dados, entre muitos outros.
                        *Importante notar que os computadores possuem ainda a característica de utilizam apenas a linguagem de máquina (Binário) para processar e enviar informações. Falaremos sobre essa linguagem mais adiante no nosso curso.
                        Dessa forma para identificarmos um computador devemos compreender suas características fundamentais, assim separamos 3 conceitos básicos pertencentes a qualquer computador que são “Hardware, Software, Peopleware”:
        </p>
    </div>
    <!--excerpt-->
    <div class='block_content'>
        <h3>HARDWARE</h3>
        <p>
            Em definição Hardwares são nada mais que a parte física do computador, sendo o conjunto de componentes elétricos, eletrônicos, eletromecânicos como as placas e demais dispositivos periféricos (componentes extras). 
                        Para exemplificar vamos olhar o hardware que temos nos computadores de mesa.
            <p>
                <div class='block_example'>
                    <h4>Gabinetes</h4>
                    <p class='text_with_img_right'>
                        <img src='/assets/img/posts/introduction-to-computing/image5.jpeg'/>
                        Os gabinetes não são necessariamente uma peça de Hardware, mas sim a caixa onde nosso hardware fica, note que na imagem ao lado nosso gabinete está vazio, ou seja sem nenhuma peça (Hardware) dentro dele.
                    </p>
                </div>

                <div class='block_example'>
                    <h4>Placa Mãe:</h4>
                    <p class='text_with_img_right'>
                        <img src='/assets/img/posts/introduction-to-computing/image6.jpeg'/>
                        Todo computador possui uma peça fundamental, essa peça é placa central onde todas as outras peças são conectadas, a chamamos de Placa Mãe.
                                                    Elas podem variar bastante em tamanho e aparência, apesar de sempre possuírem características em comum, como local para um processador, Memória Ram, HDD/SSD, etc. Abordaremos mais afundo as estruturas de uma Placa Mãe durante o módulo de Hardware
                    </p>
                </div>


                <div class='block_example'>
                    <h4>HDD e SSD:</h4>
                    <p>
                        Ambos têm a mesma função que é a de armazenar informação no computador, onde essas peças são o “local” onde guardamos todas a nossas coisas, 
                                                    por exemplo se quiséssemos tirar todas as informações do nosso computador bastaria pegar as informações que estão dentro dos HDDs e/ou SSDs
                    </p>
                    <p class='text_with_img_right'>
                        <img src='/assets/img/posts/introduction-to-computing/image8.jpeg'/>
                        <b>HDD (Hard Disk Drive)</b>
                        é uma tecnologia mais antiga que o SSD, foi inicialmente introduzido pela IBM há quase 60 anos, onde esse faz uso de magnetismo para armazenar dados, utilizando de peças mecânicas como um braço e uma cabeça de leitura e manipulação de dados. 
                                                        SSD (Solid State), funciona como uma espécie de cartão de memória, as informações no SSD são armazenadas na forma de microchips. Além disso, ao invés do dados serem acessados por um braço mecânico, os SSDs podem acessá-los diretamente do microchip. Esta é a razão pela qual o SSD é muito mais rápido do que o HDD, pois requerem de menos trabalho manual na manipulação dos seus dados.
                    </p>
                    <p class='text_with_img_right'>
                        <img src='/assets/img/posts/introduction-to-computing/image9.jpeg'/>
                        <b>SSD (Solid State)</b>, funciona como uma espécie de cartão de memória, as informações no SSD são armazenadas na forma de microchips. Além disso, ao invés do dados serem acessados por um braço mecânico, os SSDs podem acessá-los diretamente do microchip. Esta é a razão pela qual o SSD é muito mais rápido do que o HDD, pois requerem de menos trabalho manual na manipulação dos seus dados.
                    </p>
                </div>
                <!--block_example -->

                <div class='block_example'>
                    <h4>Memória Ram:</h4>
                    <p class='text_with_img_right'>
                        <img src='/assets/img/posts/introduction-to-computing/image10.png'/>
                        A memória RAM é um tipo de tecnologia que permite o acesso aos arquivos armazenados no computador. Diferentemente dos HDDs/SSDs, a RAM não armazena dados de maneira permanente. Sendo ela, no entanto a responsável pela leitura dos dados quando requeridos. 
                                                            Para simplificar a lógica por trás da função da memória RAM, é possível fazer uma analogia com uma mesa de estudos, onde reunimos o material necessário para realizar um dever de casa como: canetas, lápis, caderno e livros, etc.
                                                            Os materiais seriam os dados que precisamos manipular e a nossa mesa a Memória RAM, onde tudo que precisamos de modo temporário até que o trabalho seja feito.
                    </p>
                </div>
                <!--block_example-->

                <div class='block_example'>
                    <h4>Fonte:</h4>
                    <p class='text_with_img_right'>
                        <img src='/assets/img/posts/introduction-to-computing/image11.png'/>
                        As fontes de alimentação possuem a mesma função de qualquer outra fonte de qualquer outro dispositivo eletrônico, onde essas são as responsáveis por transformar a corrente elétrica da rede, que chega em uma voltagem alta, para uma voltagem menor, que é a indicada para o hardware do computador. Geralmente a rede elétrica possui a voltagem em 110V ou 220V.
                    </p>
                </div>
                <!--block_example-->

                <div class='block_content'>
                    <h4>Periféricos:</h4>
                    <p>
                        São uma categoria de Hardware que não é central, ou seja, são componentes “Extras” conectados ao computador principal, esses dispositivos auxiliares são usados para enviar, receber ou até mesmo gravar informações do computador. 
                                                            Podemos dividi-los em três categorias com base na sua funcionalidade:
                    </p>
                    <ul class="ul_text_with_img_bottom">
                        <li>
                            <b>Dispositivo de entrada:</b>
                            envia dados ou instruções para o computador, como: Mouse, Teclado, Mesa Digitalizadora, Scanner de imagem, Leitor de código de barras, Controlador de jogo, Microfone, Webcam, etc;
                            <img class='img_center' src='/assets/img/posts/introduction-to-computing/image12.jpeg'/>
                        </li>
                        <li>
                            <b>Dispositivo de saída:</b>
                            fornece dados de saída do computador, como: Monitor, Projetor, Impressora, Fones de ouvido e Alto-falante do computador, etc;
                            <img  class='img_center' src='/assets/img/posts/introduction-to-computing/image13.jpeg'/>

                        </li>
                        <li>
                            <b>Dispositivos de Armazenamento:</b>
                            São periféricos de entrada/saída de dados, que podem armazenar as informações de forma permanente, como: Pendrive, HDD externo, SSD externo, CD, DVD, etc.
                            <img  class='img_center' src='/assets/img/posts/introduction-to-computing/image14.jpeg'/>
                        </li>
                    </ul>

                </div> <!--block_content-->
<div class="block_content"> 
    <h3>Software</h3>
    <p>
        Para que o Hardware execute suas tarefas da maneira que desejamos, precisamos passar um conjunto de instruções para ele, esses conjuntos são os chamados Softwares, ou mais popularmente, os Programas.
        Esses programas estão presentes de diversas formas nos computadores, desempenhando variadas funções, sendo todas as ações desempenhadas por um computador executadas por algum tipo de software, ou seja, em um sentido prático não há como se utilizar um computador sem que algum software esteja envolvido no processo.
        Dessa forma Softwares estão presentes em todos os lugares onde algum tipo de computador esteja em uso, seja o caixa eletrônico que processa nossas informações, nossos celulares que hoje em dia são pequenos computadores de bolso, ou até mesmo os vídeos games que também são tipos de computadores.
        De modo simplificado podemos separa nossos Softwares em três categorias:
        <b>Sistema Operacional</b>,
        <b>Aplicativos</b> e <b>Softwares de Desenvolvimento.</b>
    </p> 
    <ul class="ul_text_with_img_bottom"> 
        <li>
            <b>Sistemas Operacionais:</b>
            São os programas encarregados de fazer a comunicação entre o computador, que só entende linguagem de máquina (Binário), e o usuário, sendo eles a base em que outros programas serão usados.
            Os sistemas operacionais como: Windows, MacOS, Linux, iOS, Android e Solaris. São exemplos de softwares de sistema; sendo usados para se criar o ambiente principal onde instalaremos outros programas que foram desenvolvidos para
            <img class='img_center' src='/assets/img/posts/introduction-to-computing/image3.jpeg'/>
         </li>
        <li>
            <b>Aplicativos:</b>
            Os softwares de aplicação, por sua vez, são os programas mais comuns, onde estes têm como função executar tarefas das mais diversas, como: players de vídeo e música, jogos, editores de textos, calculadoras, navegadores, apps de redes sociais, etc. Essas aplicações em sua grande maioria dependem de um sistema operacional para serem usadas, onde estas serão instaladas, ou seja, configuradas para uso.
            <img   class='img_center' src='/assets/img/posts/introduction-to-computing/image3.jpeg'/>
        </li> 
        <li>
            <b>Software de programação:</b>
            São as ferramentas usadas pelo programador para desenvolver novos programas.Usam diferentes linguagens de programação(C, Java, Python, Swift, etc.)onde se utilizam de compiladores e intérpretes para poderem ser executados.Falamos mais sobre essas linguagens e programas no nosso curso de Desenvolvimento Web. 
            <img  class='img_center' src='/assets/img/posts/introduction-to-computing/image3.jpeg'/>
        </li>
    </ul> 
    </div><!--block_content-->
   
    <div class="block_content"> 
        <h3>Software</h3>
        <p class="text_with_img">
            O termo Peopleware se refere a parte humana que utiliza das diversas funcionalidades dos sistemas computacionais, 
            seja este o usuário, um Analista de sistema, um cliente que faz uma consulta em um caixa eletrônico, 
            ou ainda um atendente de um Supermercado; sendo referido a todos aqueles que de alguma forma utilizam um computador. 
            Esse termo possui várias subdivisões como: Usuário, Operador, Programador, Analista de sistemas, Web Designer, etc. 
            Exemplos de categoria do Peopleware utilizadas no dia-a-dia:
            Ex.: “Os usuários do caixa eletrônico estão reclamando que o sistema está lento.”
            Ex.: “Os desenvolvedores criaram um vídeo mostrando a novas funcionalidades para os usuários.”
     </p>
     <ul>
        Assim aprendemos que podemos dividir os computadores entre com as seguintes características: 

            <li><b>HARDWARE:</b>  Elemento físico (As peças que compõem um computador);</li>
            <li><b>	PERIFÉRICOS:</b> Hardwares auxiliares do computador (Mouse, Monitor, Caixa de Som, etc);</li>
            <li><b>	SOFTWARE:</b>  Elemento lógico (Os programas que usamos no computador);</li> 
            <li><b>	PEOPLEWARE:</b> Elemento humano (Todos aqueles que utilizam o computador).</li>
            
     </ul>
   
    </div><!--bloci_content-->

    <div class="block_content"> 
        <h2>Computadores do Dia-a-dia</h2>
        <p>
            Agora que já sabemos mais sobre os computadores, vamos conferir agora uma pequena lista com os mais comuns do, para que vejamos o quanto podem variar de formato e tamanho e funcionalidade, sendo alguns desses antigos eletrônicos que acabaram por incorporar novas funcionalidades e se tornaram verdadeiros computadores.
        </p>
        <ul class="ul_text_with_img_right">
            <li>
              <img src='/assets/img/posts/introduction-to-computing/image3.jpeg'/>
                <b>Computador de Mesa (Desktop):</b> 
                O Computador de mesa ou do inglês Desktop, é o tipo de computador mais comum sendo aquele que é utilizado de maneira fixa em cima de uma mesa ou suporte, alguns possuem configurações mais potentes e personalizadas que computadores menores e mais limitados.
            </li>

            <li>
             <img src='/assets/img/posts/introduction-to-computing/image3.jpeg'/>
            <b>  Tablets:</b> 
Os tablets podem ser considerados o meio termo entre um Celular e um Notebook, tendo como principal vantagem um maior tamanho e o display tátil, sendo mais usados por quem gosta de consumir entretenimento ou trabalhar, sem perder a praticidade e portabilidade.
Tablets são bem versáteis, além de possuir as funções mais comuns de um computador alguns possuem suporte para chips de operadores possibilitando ligações como um celular.

            </li>

            <li>
                <img src='/assets/img/posts/introduction-to-computing/image3.jpeg'/>
                <b>Celulares:</b> Dos dispositivos comuns os celulares foram os que mais mudaram em um curto espaço de tempo, se em sua criação sua principal função era tornar portátil a comunicação, hoje esses dispositivos se tornaram verdadeiros computadores de bolso, tendo essa mudança começado com a chegada dos Celulares Inteligentes (Smartphones) onde esses passaram a ter Sistema Operacional e hardware muito semelhando ao de qualquer computador, tendo conexão com a internet e permitindo ainda a instalação programas (Aplicativos) para diversas finalidades. Atualmente quando falamos de celulares estamos automaticamente pensando em um Smartphone.

            </li>

            <li>
                <img src='/assets/img/posts/introduction-to-computing/image3.jpeg'/>
                <b>TVs:</b> 
Com a ascensão de serviços de streaming (Filmes/Séries online), e a melhora da conexão da internet as tvs também passaram por mudanças, passando ter seus próprios sistemas, com suporte a aplicativos de streaming como os da Netflix, conexão com a internet, conteúdo interatido, aplicativos, jogos, etc. 


            </li>

            
            <li>
                <img src='/assets/img/posts/introduction-to-computing/image3.jpeg'/>
                <b>Vídeo Games:</b> 
                Mesmo não sendo tão óbvio os vídeo games atuais nada mais são que computadores dedicados a jogos, possuindo as mesmas características de qualquer computador comum, como: processadores, Memória Ram, HD, etc. além de terem seu próprio sistema operacional, conexão com a internet e até mesmo aplicativos. 
                
            </li>

    
        <p>
            Estes foram somente alguns exemplos, afinal ainda existem uma gama gigantesca de outros tipos de computadores, como: Supercomputadores, Servidores, Mainframes, Computadores de Bordo, E-readers, Controladores, etc.
        </p>
</ul>

    </div><!--block_content-->
    <div class="block_content"> 
    <h2>Conclusão:</h2>
    <p>
    Vimos que a Informática nada mais é do que a transformação de dados em informação em um processo automático que se dá através dos computadores que são compostos por Hardwares que pode ser tanto periféricos (Mouse, Teclado, Monitor etc.). quanto central (Placa Mãe, Processador, etc.), também aprendemos mais sobre “Software” e como podem ser considerados conjuntos de instruções para o computador, além de podermos dividi-los em “Sistema Operacional, Aplicativos, Software de Desenvolvimento“,  e também como tudo isso está relacionado as pessoas que os utilizam sendo estas conhecidas como Peopleware, também vimos que os computadores estão presentes no nosso dia-a-dia nas mais diferentes formas, tamanhos e funcionalidades, onde temos computadores de bolso, (celulares), ou até mesmo nas nossas TVs com as Smart TVs (TVs Inteligentes que possuem características de computador), ou ainda os vídeo games, percebendo dessa forma como os computadores estão presentes na tarefas mais variadas do nosso dia-a-dia.
</p>
</div><!--block_content-->



</div><!--bg_content-->
</div><!--bg_content-->]]></content><author><name></name></author><category term="Informática" /><category term="Informática" /><summary type="html"><![CDATA[Fundamentos da Informática Para iniciarmos nossos estudos sobre informática, primeiro devemos entender melhor o que esse termo significa, onde temos a seguinte definição: “A Informática é a ciência que estuda o tratamento automático da informação; utilizando para esse fim dispositivos eletrônicos, sendo esses os que chamamos de computadores”. O termo “Informática” tem sua origem em 1962 na França, sendo a contração das palavras Information automatique (Informação automática). Vamos agora olhar a definição de mais três palavras: Automática, Dados, Informação. Assim poderemos compreender melhor o que “Informação Automática” realmente significa. Automática: “Aquilo que acontece sem precisarmos interferir, ou seja acontece por si só”. Ex.: “Basta clicar em um botão e a máquina faz tudo automaticamente”. Dados: “São ideias ou fatos em sua forma bruta, que por si só não conduzem a compreensão de determinada situação”. Ex.: “as notas parciais 7.0 e 4.0 de um aluno”. Informação: “Dados que foram transformados, manipulados e organizados que tem valor para a tomada de decisões”. Ex.: “O aluno que obteve as notas 4.0 e 7.0 está reprovado por não ter atingido a média 6.0”. Note que no nosso último exemplo as notas 4.0 e 7.0 do aluno foram nossos dados e a partir disso tivemos a informação de que ele está reprovado, nesse caso poderíamos ainda utilizar um computador para que sempre pegue as duas notas e tire a média de cada aluno, assim aprovando ou os reprovando automaticamente. Agora que sabemos que Informática é o ato de transformar dados em informação de maneira automática, precisamos passar a entender melhor as máquinas que tornam isso possível; os computadores. Mas afinal o que é um Computador? Podemos definir o computador como uma máquina que a partir de instruções adequadas é capaz de realizar uma grande gama de tarefas (Processamento de Dados), com alta velocidade e precisão. Uma das grandes características dos computadores está no fato de serem utilizados para uma grande variedade de tarefas, ou seja, diferentemente de um refrigerador ou de um forno de micro-ondas, que possuem um propósito bem definido, um computador pode ser utilizado para: digitar um texto, navegar na Internet, ouvir músicas, ver filmes, acompanhar investimentos, projetar edificações, publicar notícias, etc. Além de suas diversas finalidades os computadores ainda possuem diferentes formatos, tamanhos, e capacidades, assim quando falamos em computador, podemos estar nos referindo ao computador de bordo de um veículo, a um celular, um notebook, a uma máquina que controla a temperatura de uma caldeira em uma indústria ou até mesmo a supercomputadores, que são grandes computadores com uma imensa capacidade de processar dados, entre muitos outros. *Importante notar que os computadores possuem ainda a característica de utilizam apenas a linguagem de máquina (Binário) para processar e enviar informações. Falaremos sobre essa linguagem mais adiante no nosso curso. Dessa forma para identificarmos um computador devemos compreender suas características fundamentais, assim separamos 3 conceitos básicos pertencentes a qualquer computador que são “Hardware, Software, Peopleware”: HARDWARE Em definição Hardwares são nada mais que a parte física do computador, sendo o conjunto de componentes elétricos, eletrônicos, eletromecânicos como as placas e demais dispositivos periféricos (componentes extras). Para exemplificar vamos olhar o hardware que temos nos computadores de mesa. Gabinetes Os gabinetes não são necessariamente uma peça de Hardware, mas sim a caixa onde nosso hardware fica, note que na imagem ao lado nosso gabinete está vazio, ou seja sem nenhuma peça (Hardware) dentro dele. Placa Mãe: Todo computador possui uma peça fundamental, essa peça é placa central onde todas as outras peças são conectadas, a chamamos de Placa Mãe. Elas podem variar bastante em tamanho e aparência, apesar de sempre possuírem características em comum, como local para um processador, Memória Ram, HDD/SSD, etc. Abordaremos mais afundo as estruturas de uma Placa Mãe durante o módulo de Hardware HDD e SSD: Ambos têm a mesma função que é a de armazenar informação no computador, onde essas peças são o “local” onde guardamos todas a nossas coisas, por exemplo se quiséssemos tirar todas as informações do nosso computador bastaria pegar as informações que estão dentro dos HDDs e/ou SSDs HDD (Hard Disk Drive) é uma tecnologia mais antiga que o SSD, foi inicialmente introduzido pela IBM há quase 60 anos, onde esse faz uso de magnetismo para armazenar dados, utilizando de peças mecânicas como um braço e uma cabeça de leitura e manipulação de dados. SSD (Solid State), funciona como uma espécie de cartão de memória, as informações no SSD são armazenadas na forma de microchips. Além disso, ao invés do dados serem acessados por um braço mecânico, os SSDs podem acessá-los diretamente do microchip. Esta é a razão pela qual o SSD é muito mais rápido do que o HDD, pois requerem de menos trabalho manual na manipulação dos seus dados. SSD (Solid State), funciona como uma espécie de cartão de memória, as informações no SSD são armazenadas na forma de microchips. Além disso, ao invés do dados serem acessados por um braço mecânico, os SSDs podem acessá-los diretamente do microchip. Esta é a razão pela qual o SSD é muito mais rápido do que o HDD, pois requerem de menos trabalho manual na manipulação dos seus dados. Memória Ram: A memória RAM é um tipo de tecnologia que permite o acesso aos arquivos armazenados no computador. Diferentemente dos HDDs/SSDs, a RAM não armazena dados de maneira permanente. Sendo ela, no entanto a responsável pela leitura dos dados quando requeridos. Para simplificar a lógica por trás da função da memória RAM, é possível fazer uma analogia com uma mesa de estudos, onde reunimos o material necessário para realizar um dever de casa como: canetas, lápis, caderno e livros, etc. Os materiais seriam os dados que precisamos manipular e a nossa mesa a Memória RAM, onde tudo que precisamos de modo temporário até que o trabalho seja feito. Fonte: As fontes de alimentação possuem a mesma função de qualquer outra fonte de qualquer outro dispositivo eletrônico, onde essas são as responsáveis por transformar a corrente elétrica da rede, que chega em uma voltagem alta, para uma voltagem menor, que é a indicada para o hardware do computador. Geralmente a rede elétrica possui a voltagem em 110V ou 220V. Periféricos: São uma categoria de Hardware que não é central, ou seja, são componentes “Extras” conectados ao computador principal, esses dispositivos auxiliares são usados para enviar, receber ou até mesmo gravar informações do computador. Podemos dividi-los em três categorias com base na sua funcionalidade: Dispositivo de entrada: envia dados ou instruções para o computador, como: Mouse, Teclado, Mesa Digitalizadora, Scanner de imagem, Leitor de código de barras, Controlador de jogo, Microfone, Webcam, etc; Dispositivo de saída: fornece dados de saída do computador, como: Monitor, Projetor, Impressora, Fones de ouvido e Alto-falante do computador, etc; Dispositivos de Armazenamento: São periféricos de entrada/saída de dados, que podem armazenar as informações de forma permanente, como: Pendrive, HDD externo, SSD externo, CD, DVD, etc. Software Para que o Hardware execute suas tarefas da maneira que desejamos, precisamos passar um conjunto de instruções para ele, esses conjuntos são os chamados Softwares, ou mais popularmente, os Programas. Esses programas estão presentes de diversas formas nos computadores, desempenhando variadas funções, sendo todas as ações desempenhadas por um computador executadas por algum tipo de software, ou seja, em um sentido prático não há como se utilizar um computador sem que algum software esteja envolvido no processo. Dessa forma Softwares estão presentes em todos os lugares onde algum tipo de computador esteja em uso, seja o caixa eletrônico que processa nossas informações, nossos celulares que hoje em dia são pequenos computadores de bolso, ou até mesmo os vídeos games que também são tipos de computadores. De modo simplificado podemos separa nossos Softwares em três categorias: Sistema Operacional, Aplicativos e Softwares de Desenvolvimento. Sistemas Operacionais: São os programas encarregados de fazer a comunicação entre o computador, que só entende linguagem de máquina (Binário), e o usuário, sendo eles a base em que outros programas serão usados. Os sistemas operacionais como: Windows, MacOS, Linux, iOS, Android e Solaris. São exemplos de softwares de sistema; sendo usados para se criar o ambiente principal onde instalaremos outros programas que foram desenvolvidos para Aplicativos: Os softwares de aplicação, por sua vez, são os programas mais comuns, onde estes têm como função executar tarefas das mais diversas, como: players de vídeo e música, jogos, editores de textos, calculadoras, navegadores, apps de redes sociais, etc. Essas aplicações em sua grande maioria dependem de um sistema operacional para serem usadas, onde estas serão instaladas, ou seja, configuradas para uso. Software de programação: São as ferramentas usadas pelo programador para desenvolver novos programas.Usam diferentes linguagens de programação(C, Java, Python, Swift, etc.)onde se utilizam de compiladores e intérpretes para poderem ser executados.Falamos mais sobre essas linguagens e programas no nosso curso de Desenvolvimento Web. Software O termo Peopleware se refere a parte humana que utiliza das diversas funcionalidades dos sistemas computacionais, seja este o usuário, um Analista de sistema, um cliente que faz uma consulta em um caixa eletrônico, ou ainda um atendente de um Supermercado; sendo referido a todos aqueles que de alguma forma utilizam um computador. Esse termo possui várias subdivisões como: Usuário, Operador, Programador, Analista de sistemas, Web Designer, etc. Exemplos de categoria do Peopleware utilizadas no dia-a-dia: Ex.: “Os usuários do caixa eletrônico estão reclamando que o sistema está lento.” Ex.: “Os desenvolvedores criaram um vídeo mostrando a novas funcionalidades para os usuários.” Assim aprendemos que podemos dividir os computadores entre com as seguintes características: HARDWARE: Elemento físico (As peças que compõem um computador); PERIFÉRICOS: Hardwares auxiliares do computador (Mouse, Monitor, Caixa de Som, etc); SOFTWARE: Elemento lógico (Os programas que usamos no computador); PEOPLEWARE: Elemento humano (Todos aqueles que utilizam o computador). Computadores do Dia-a-dia Agora que já sabemos mais sobre os computadores, vamos conferir agora uma pequena lista com os mais comuns do, para que vejamos o quanto podem variar de formato e tamanho e funcionalidade, sendo alguns desses antigos eletrônicos que acabaram por incorporar novas funcionalidades e se tornaram verdadeiros computadores. Computador de Mesa (Desktop): O Computador de mesa ou do inglês Desktop, é o tipo de computador mais comum sendo aquele que é utilizado de maneira fixa em cima de uma mesa ou suporte, alguns possuem configurações mais potentes e personalizadas que computadores menores e mais limitados. Tablets: Os tablets podem ser considerados o meio termo entre um Celular e um Notebook, tendo como principal vantagem um maior tamanho e o display tátil, sendo mais usados por quem gosta de consumir entretenimento ou trabalhar, sem perder a praticidade e portabilidade. Tablets são bem versáteis, além de possuir as funções mais comuns de um computador alguns possuem suporte para chips de operadores possibilitando ligações como um celular. Celulares: Dos dispositivos comuns os celulares foram os que mais mudaram em um curto espaço de tempo, se em sua criação sua principal função era tornar portátil a comunicação, hoje esses dispositivos se tornaram verdadeiros computadores de bolso, tendo essa mudança começado com a chegada dos Celulares Inteligentes (Smartphones) onde esses passaram a ter Sistema Operacional e hardware muito semelhando ao de qualquer computador, tendo conexão com a internet e permitindo ainda a instalação programas (Aplicativos) para diversas finalidades. Atualmente quando falamos de celulares estamos automaticamente pensando em um Smartphone. TVs: Com a ascensão de serviços de streaming (Filmes/Séries online), e a melhora da conexão da internet as tvs também passaram por mudanças, passando ter seus próprios sistemas, com suporte a aplicativos de streaming como os da Netflix, conexão com a internet, conteúdo interatido, aplicativos, jogos, etc. Vídeo Games: Mesmo não sendo tão óbvio os vídeo games atuais nada mais são que computadores dedicados a jogos, possuindo as mesmas características de qualquer computador comum, como: processadores, Memória Ram, HD, etc. além de terem seu próprio sistema operacional, conexão com a internet e até mesmo aplicativos. Estes foram somente alguns exemplos, afinal ainda existem uma gama gigantesca de outros tipos de computadores, como: Supercomputadores, Servidores, Mainframes, Computadores de Bordo, E-readers, Controladores, etc. Conclusão: Vimos que a Informática nada mais é do que a transformação de dados em informação em um processo automático que se dá através dos computadores que são compostos por Hardwares que pode ser tanto periféricos (Mouse, Teclado, Monitor etc.). quanto central (Placa Mãe, Processador, etc.), também aprendemos mais sobre “Software” e como podem ser considerados conjuntos de instruções para o computador, além de podermos dividi-los em “Sistema Operacional, Aplicativos, Software de Desenvolvimento“, e também como tudo isso está relacionado as pessoas que os utilizam sendo estas conhecidas como Peopleware, também vimos que os computadores estão presentes no nosso dia-a-dia nas mais diferentes formas, tamanhos e funcionalidades, onde temos computadores de bolso, (celulares), ou até mesmo nas nossas TVs com as Smart TVs (TVs Inteligentes que possuem características de computador), ou ainda os vídeo games, percebendo dessa forma como os computadores estão presentes na tarefas mais variadas do nosso dia-a-dia.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/posts/introduction-to-computing/image3.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/posts/introduction-to-computing/image3.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="pt"><title type="html">INTRODUÇÃO A BANCO DE DADOS</title><link href="http://localhost:4000/data%20base/banco%20de%20dados/2020/12/03/introducao-a-banco-de-dados.html" rel="alternate" type="text/html" title="INTRODUÇÃO A BANCO DE DADOS" /><published>2020-12-03T03:10:00-03:00</published><updated>2020-12-03T03:10:00-03:00</updated><id>http://localhost:4000/data%20base/banco%20de%20dados/2020/12/03/introducao-a-banco-de-dados</id><content type="html" xml:base="http://localhost:4000/data%20base/banco%20de%20dados/2020/12/03/introducao-a-banco-de-dados.html"><![CDATA[<p>Banco de Dados, pode ser definido como qualquer coleção de informações armazenadas de forma organizada e relacionada; onde podemos acessar os dados armazenados para obter determinadas informações.
<!--more-->
Uma boa forma de se entender os Bancos de Dados atuais é olharmos para forma em que armazenávamos informações antigamente. E uma maneira muito comum de se fazer isso era usando um Arquivador Metálico, onde esse tipo de “estrutura” armazenava os dados de forma organizada, onde por exemplo poderíamos ter uma ficha de cadastro, e essa fichar era colocada em uma determinada pasta, e por sua vez essa pasta era guardada em uma das gavetas de um arquivador, assim quando quiséssemos obter alguma informação relacionada aos cadastros, bastaria acessar essa gaveta, pegar a pasta e pesquisar por seus cadastros.
<img src="/assets/img/posts/banco-de-dados/bd-exemplo-01.png" alt="Exemplo de Arquivo" /></p>

<p>Assim da mesma forma que o Arquivador do exemplo podemos dizer que um Banco de Dados nada mais é que uma estrutura que permite: Organizar, armazenar e recuperar dados.
Se fôssemos converter essa mesma estrutura para um banco de dados (Modelo Relacional), nossas fichas seriam nossos registros e as pastas as nossas Tabelas, onde o Banco de Dados poderia ser o próprio arquivador.
Confira a ilustração abaixo.
<img src="/assets/img/posts/banco-de-dados/bd-exemplo-02.png" alt="Exemplo de Banco de Dados" /></p>

<h2 id="origem-dos-bancos-de-dados-na-tecnologia">Origem dos Bancos de Dados na Tecnologia</h2>

<p>Antes do surgimento do computador estruturas físicas parecidas como o Armários Metálico do exemplo, armazenavam todo tipo de informação, desde Livros em uma biblioteca, Fichas Policiais, Registros Hospitalares, etc. 
Esses tipos de estruturas foram usadas por muitas décadas (ainda usada hoje em dia em algumas situações), porem esse método possui inúmera desvantagens, como a de não ser prático a procura, durabilidade das informações, e a grande desvantagem de ocupar muito espaço.
Com a evolução dos computadores no final dos anos 50 os computadores que antes eram focados quase que inteiramente em algoritmos e cálculos para fins militares e de Pesquisa começaram a ser adquiridos empresas,</p>

<p>, e com isso a necessidade de se digitalizar e armazenar dados cresceu consideravelmente.
Até essa época os arquivos eram armazenados em fitas em um processo 0que ficou conhecido como: Arquivos Sequenciais, onde os registros eram disponibilizados em ordem sequencial onde para se acessar um dado era necessário percorrer todos os seus antecessores.
Com a chegada os primeiros Discos Rígidos, tornou-se possível o acesso direto a arquivos, onde esses podiam ser lidos diretamente através de seus índices. Apar de representar uma grande evolução esse método ainda era rudimentar e pouco estruturado.
Assim em 1959 foi formado um consorcio chamado CODASYL (Committee on Data Systems Languages) para principalmente alcançar o desenvolvimento de uma nova linguagem que poderia ser usada em vários tipos de programação que poderia ser usado em vários computadores e guiar o desenvolvimento novas tecnologias.
Esse comitê ficou conhecido principalmente pelo desenvolvimento do COBOL (Common Business Oriented Language). e seus trabalhos em padronizar as interfaces de Banco de Dados.<br />
Nessa conferência foram reunidos empresas, militares e universidade, para discutirem novas tecnologias e possibilidades para novas soluções tecnológicas, desse encontro surgiu entre outros padrões o COBOL e CODASYL Data Modele e uma nova tecnologia chamada Database (Banco de Dados).
A Linguagem COBOL foi a primeira linguagem a de fato de preocupar tanto com o desenvolvimento de programas e algoritmos como a manipulação e armazenamento de dados.</p>

<p><img src="/assets/img/posts/banco-de-dados/img-codasyl.jpg" alt="Exemplo de Arquivo" /></p>

<h2 id="modelos-de-dados">Modelos de Dados</h2>

<p>Os modelos de banco de dados são a formas de se organizar ou estrutur um banco de dados o que inclui as relações e restrições que determinam como os dados podem ser armazenados e acessados. Abaixo segue um apequena lista com alguns modelos.</p>

<li> Modelos Hierárquicos (proposto pela IBM)</li>
<li> Modelo em Rede (Network Database Model / CODASYL Data Model)</li>
<li> Modelo Relacional</li>
<li> Modelo não Relacional Baseado em Documento (NoSQL)</li>
<li> Modelo Baseado em Objetos</li>

<h2 id="modelo-relacional">Modelo Relacional</h2>

<p>Criado em 1970, os Modelos Relacionais são os mais usados até hoje, e dessa lista que apresentamos podemos dizer que ele é o mais “importante”, pois além de ser o mais popular, ele ainda possuí uma maior facilidade de aprendizagem, além de estarem presentes em pequenas e grandes aplicações.
Dessa maneira nosso curso de Banco de Dados será focado no Modelo Relacional.</p>

<h2 id="sql">SQL</h2>

<p>O SQL foi desenvolvido originalmente no início dos anos 70 nos laboratórios da IBM, que tinha por objetivo demonstrar a viabilidade da implementação do modelo relacional proposto por E. F. Codd. O nome original da linguagem era SEQUEL, acrônimo para “Structured English Query Language” (Linguagem de Consulta Estruturada, em Inglês) posteriormente passou a ser chamada de SQL (Structured Query Language) que significa Linguagem de Consulta Estruturada.
SQL pode ser considerado a parte fundamental do Modelo Relacional, ele é usado para acessar e gerenciar o Banco de Dados. Através do SQL podemos adicionar, atualizar ou deletar registros em uma tabela, alem de termos acesso a subconjuntos de informações.</p>]]></content><author><name></name></author><category term="Data Base" /><category term="Banco de Dados" /><category term="DB" /><category term="BD" /><category term="Banco de Dados" /><summary type="html"><![CDATA[Banco de Dados, pode ser definido como qualquer coleção de informações armazenadas de forma organizada e relacionada; onde podemos acessar os dados armazenados para obter determinadas informações.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/posts/banco-de-dados/banco-de-dados-conceitos-essenciais.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/posts/banco-de-dados/banco-de-dados-conceitos-essenciais.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="pt"><title type="html">O que é DNS?</title><link href="http://localhost:4000/dicion%C3%A1rio/dictionary/2020/12/01/o-que-e-dns.html" rel="alternate" type="text/html" title="O que é DNS?" /><published>2020-12-01T12:00:00-03:00</published><updated>2020-12-01T12:00:00-03:00</updated><id>http://localhost:4000/dicion%C3%A1rio/dictionary/2020/12/01/o-que-e-dns</id><content type="html" xml:base="http://localhost:4000/dicion%C3%A1rio/dictionary/2020/12/01/o-que-e-dns.html"><![CDATA[<p>Existe uma boa analogia que resume a função do DNS que é:
<em>“DNS é uma especie de lista telefônica da internet”</em>,
É uma boa comparação já que a função do DNS é assim como numa lista telefonica associar Associar um “Nome” a um “Número”. Assim chamamos esse Nome de “Domínio” e o Númeo de IP (Internet Protocol).
<!--more--></p>

<p>Essa necessidade de conversão entre Domínio para um número de IP existe somente por que diferente dos humanos os computadores trabalham essencialmete com números, assim tanto a indentificação de um endereço é feita atraves de um número o IP.
Apesar de funcionar bem para computadores para nós (humanos) memorizar endereços de IP como 192.168.1.1 (no IPv4) ou endereços IP alfanuméricos mais complexos e mais recentes, como 2400:cb00:2048:1::c629:d7a2 (no IPv6) é algo estremamente dificil e por esse motivo que os Servidores DNS são essênciais.</p>

<h2 id="como-surgiu">Como surgiu?</h2>

<p>No final dos anos 70 e inicio dos 1980 o número de computadores conectados crescia rapidamente o que gerou um problema na indentificação e comunicação. ja que para se conectar com outro computar era preciso saber seu endereço de IP, assim foi deixa a cardo do cientista <em>Paul Mockapetris</em> e sua equipe a busca por uma solução.
Foi quando ainda no ano de de 1983 eles criaram um sistema que era capaz de atribuir e conferir em uma espêcie de lista, nomes associados a IPS assim nascia o DNS, que até hoje é um dos principios fundamentais da internet.</p>

<h2 id="como-funciona">Como funciona?</h2>

<p>Todo dispositivo contectado a rede tem um edereço de IP único para que possa ser indentificado, então quando digitamos um dominio como “teste.com” o que estamos realmente fazendo é buscar um determinado “computador” na rede mundial de computadores, ou seja na Internet. esse nome pesquisado é uma especie de etiqueta que está atribuido a um número de indentificação de um determinado computador ou simplesmente o IP.
Para fazer essa pesquisa utilizamos antes de mais nada o nosso Browser, que antes de mais nada ira conferir no cash e depois localmente se aquele dominino/hostname esta associado algum IP, caso não esteja então ele enviara uma requisição para um Servidor DNS onde esse ira procurar em uma espercie de lista se quele domínio esta associado a algum endereço de IP, caso esteja ele retornara o número do IP, permitindo que assim o navegador faça a requisição com o servidor correto através de uma conexão HTTP onde este ira retornar o conteúdo solicitado.</p>

<h2 id="quem-é-o-responsável-pelo-dns">Quem é o responsável pelo DNS?</h2>

<p>A organização responsável por atribuir nomes de domínios a endereços IPs no mundo todo é a ICANN (Internet Corporation for Assigned Names and Numbers), ou Corporação da Internet para Atribuição de Nomes e Números, em português. saiba mais sobre a ICANN <a href="https://pt.wikipedia.org/wiki/Corpora%C3%A7%C3%A3o_da_Internet_para_Atribui%C3%A7%C3%A3o_de_Nomes_e_N%C3%BAmeros">aqui</a>.</p>

<!--
# Divisão de um Servidor DNS.

# O que é um Origin Server?

# O que é um CDN edge Server?

# O que são esses servidores?

A server is a device or program dedicated to providing services to other programs, referred to as ‘clients’. DNS clients, which are built into most modern desktop and mobile operating systems, enable web browsers to interact with DNS servers. For more, see The Client-Server Model.

How do DNS servers resolve a DNS query?
In a typical DNS query without any caching, there are four servers that work together to deliver an IP address to the client: recursive resolvers, root nameservers, TLD nameservers, and authoritative nameservers.

The DNS recursor (also referred to as the DNS resolver) is a server that receives the query from the DNS client, and then interacts with other DNS servers to hunt down the correct IP. Once the resolver receives the request from the client, the resolver then actually behaves as a client itself, querying the other three types of DNS servers in search of the right IP.

DNS Lookup
First the resolver queries the root nameserver. The root server is the first step in translating (resolving) human-readable domain names into IP addresses. The root server then responds to the resolver with the address of a Top Level Domain (TLD) DNS server (such as .com or .net) that stores the information for its domains.

Next the resolver queries the TLD server. The TLD server responds with the IP address of the domain’s authoritative nameserver. The recursor then queries the authoritative nameserver, which will respond with the IP address of the origin server.

The resolver will finally pass the origin server IP address back to the client. Using this IP address, the client can then initiate a query directly to the origin server, and the origin server will respond by sending website data that can be interpreted and displayed by the web browser.

What is DNS Caching?
In addition to the process outlined above, recursive resolvers can also resolve DNS queries using cached data. After retrieving the correct IP address for a given website, the resolver will then store that information in its cache for a limited amount of time. During this time period, if any other clients send requests for that domain name, the resolver can skip the typical DNS lookup process and simply respond to the client with the IP address saved in the cache.

Once the caching time limit expires, the resolver must retrieve the IP address again, creating a new entry in its cache. This time limit, referred to as the time-to-live (TTL) is set explicitly in the DNS records for each site. Typically the TTL is in the 24-48 hour range. A TTL is necessary because web servers occasionally change their IP addresses, so resolvers can’t serve the same IP from the cache indefinitely.

What happens when DNS servers fail?
DNS servers can fail for multiple reasons, such as power outages, cyberattacks, and hardware malfunctions. In the early days of the Internet, DNS server outages could have a relatively large impact. Thankfully, today there is a lot of redundancy built into DNS. For example, there are many instances of the root DNS servers and TLD nameservers, and most ISPs have backup recursive resolvers for their users. (Individual users can also use public DNS resolvers, like Cloudflare’s 1.1.1.1.) Most popular websites also have multiple instances of their authoritative nameservers.

In the case of a major DNS server outage, some users may experience delays due to the amount of requests being handled by backup servers, but it would take a DNS outage of very large proportions to make a significant portion of the Internet unavailable. (This actually happened in 2016 when DNS provider Dyn experienced one of the biggest DDoS attacks in history). Cloudflare offers a Managed DNS Service that comes with built-in DNS security aimed at protecting DNS servers from attacks as well as other common sources of server failure.




-->]]></content><author><name></name></author><category term="Dicionário" /><category term="Dictionary" /><category term="DNS" /><category term="IP" /><summary type="html"><![CDATA[Existe uma boa analogia que resume a função do DNS que é: “DNS é uma especie de lista telefônica da internet”, É uma boa comparação já que a função do DNS é assim como numa lista telefonica associar Associar um “Nome” a um “Número”. Assim chamamos esse Nome de “Domínio” e o Númeo de IP (Internet Protocol).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/posts/o-que-e-dns-01.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/posts/o-que-e-dns-01.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="pt"><title type="html">O que é DOM?</title><link href="http://localhost:4000/dicion%C3%A1rio/dictionary/2020/11/29/o-que-e-dom.html" rel="alternate" type="text/html" title="O que é DOM?" /><published>2020-11-29T12:00:00-03:00</published><updated>2020-11-29T12:00:00-03:00</updated><id>http://localhost:4000/dicion%C3%A1rio/dictionary/2020/11/29/o-que-e-dom</id><content type="html" xml:base="http://localhost:4000/dicion%C3%A1rio/dictionary/2020/11/29/o-que-e-dom.html"><![CDATA[<p>DOM (Document Object Model) é um padrão de representação de um documento HTML/XML que é gerado automaticamente pelos browsers e armazenado em formato de objetos logo após o documento ser lido. <!--more-->O DOM possui sua estrutura representada em formato de “arvore” essa estrutura possui uma relação “pai” e “filho” onde o elemento pai é aquele que contêm o elemento filho, e o elemento filho por sua vez é o que está contidos dentro de um elemento pai, e que também pode conter seus próprios elementos filhos, quando há mais de um elemento filho esses possuem uma relação de irmão de um para o outro.</p>

<p><img src="/assets/img/posts/o-que-e-dom-document-object-model-02.jpg" alt="DOM" /></p>

<p>Podemos nos referir as estruturas do documento DOM de três maneiras diferentes sendo elas: Nó, Tag e Elemento.</p>

<p>Obs.: O DOM é gerado pelos browser, sendo assim não está presente no NodeJS por exemplo.</p>

<h2 id="pra-que-serve">Pra que serve?</h2>

<p>O DOM permite que todos os elementos e informações possam ser acessadas, tratados e modificados através do seu objeto principal “window”, a maneira mais comum de se fazer isso é através do Javascript que nos fornece propriedades e métodos DOM.</p>

<h2 id="quando-surgiu">Quando surgiu?</h2>

<p>Os primeiros passos do DOM foram a partir de 1995 com o lançamento do Javascript para o Netscape Navigator e em 1996 com a adaptação JScript lançada pela microsoft para o Internet Explorer 3.0, a forma como essas linguagens acessavam o documento acabou sendo chamada de DOM Legado durante a guerra entre os navegadores mas somente após 1997 com a padronização do Javascript e do JScript para ECMAScript que o DOM começou a ser desenvolvido como um padrão a ser seguido por todos os browsers. sendo recomendado a partir de 1998 e batizado como DOM Nível 1 posteriormente foram lançados em 2000, DOM Nível 2 e em 2004 DOM Nível 3 sendo essa a versão atual até a data dessa publicação.</p>

<p>Caso queira ler um pouco mais sobre os leveis de cada DOM: https://developer.mozilla.org/fr/docs/DOM_Levels</p>]]></content><author><name></name></author><category term="Dicionário" /><category term="Dictionary" /><category term="DOM" /><category term="HTML" /><summary type="html"><![CDATA[DOM (Document Object Model) é um padrão de representação de um documento HTML/XML que é gerado automaticamente pelos browsers e armazenado em formato de objetos logo após o documento ser lido.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/posts/o-que-e-dom-01.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/posts/o-que-e-dom-01.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="pt"><title type="html">O que são Expressões Regulares (RegExp)?</title><link href="http://localhost:4000/dicion%C3%A1rio/dictionary/regex/2020/11/29/o-que-sao-expressoes-regulares.html" rel="alternate" type="text/html" title="O que são Expressões Regulares (RegExp)?" /><published>2020-11-29T00:00:00-03:00</published><updated>2020-11-29T00:00:00-03:00</updated><id>http://localhost:4000/dicion%C3%A1rio/dictionary/regex/2020/11/29/o-que-sao-expressoes-regulares</id><content type="html" xml:base="http://localhost:4000/dicion%C3%A1rio/dictionary/regex/2020/11/29/o-que-sao-expressoes-regulares.html"><![CDATA[<p>Expressões Regulares (RegExp ou RegEx) são um conjunto de expressões formadas por símbolos que possibilitam a analise e edição de um conjunto de caracteres (Textos). permitindo a construção de filtros e edições automáticas de maneira mais simples e menos verbosa no que se diz respeito a programação.
<!--more--></p>

<h2 id="quando-surgiu">Quando surgiu?</h2>

<p>O conceito surgiu em 1943 em uma teoria sobre neurônios, antes mesmo do primeiro modelo de computador, alguns anos depois esse conceito recebeu símbolos para representar esses grupos regulares, com isso surgiu a notação das Expressões Regulares.
Ainda demoraria alguns anos para RegExp chegar aos computadores, começando a ser aplicado somente em 1968 em um algoritmo de busca do sistema Unix.</p>

<p>Em 1986 as Expressões Regulares passaram a fazer definitivamente parte da computação, com a implementação de um pacote para C chamado Regex, que permitia que qualquer um tratasse e incluísse Expressões Regulares em seus programas.</p>

<h2 id="regexp-sabores">RegExp Sabores</h2>

<p>Não existe um único padrão para as RegExp (Regular Expression) sendo assim surgiu o termo Sabor (Flavor) é comumente usada para determinar qual o padrão de Regex é utilizado por uma linguagem ou biblioteca.</p>

<h3 id="alguns-do-sabores">Alguns do Sabores</h3>

<p>.NET, Java, Javascript, PCRE, Pearl, Python, Ruby</p>

<p><a href="http://xregexp.com/">XRegExp</a> é uma biblioteca open-source desenvolvida para apliar as funções do RegExp Javascript padrão e também para evitar bugs e inconsistências entre os Browsers.</p>

<p><a href="https://www.pcre.org/">PCRE</a> significa “Perl-Compatible Regular Expressions” que é uma biblioteca popular, compatível com o Pear-flavor.</p>

<h2 id="procurar-e-substituir">Procurar e Substituir</h2>

<p>Buscas e substituir é uma das funções primordiais das Regex, Essas funções normalmente são compostas por, uma string como alvo, uma expressão e uma string substituta como input. O output é a string alvo com todas as substituições feitas pela expressão regular.</p>

<p><a href="https://www.regexbuddy.com/">RegexBuddy</a> é um programa que ajuda a desenvolver, converter e testar expressões regulares de diversos tipos.</p>

<p><a href="https://www.regexmagic.com/">RegexMagic</a> é uma ferramenta que agiliza a criação de Regex.</p>

<p><a href="https://www.regexpal.com/">RegexPal</a> é uma aplicação online que ajuda fazer testes em regex para javacript.</p>

<p><a href="https://www.regexplanet.com/">RegexPlanet</a> tester online de Regex de vários tipos.</p>]]></content><author><name></name></author><category term="Dicionário" /><category term="Dictionary" /><category term="Regex" /><category term="RegExp" /><category term="Expressões Regulares" /><summary type="html"><![CDATA[Expressões Regulares (RegExp ou RegEx) são um conjunto de expressões formadas por símbolos que possibilitam a analise e edição de um conjunto de caracteres (Textos). permitindo a construção de filtros e edições automáticas de maneira mais simples e menos verbosa no que se diz respeito a programação.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/posts/o-que-sao-expressoes-regulares-01.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/posts/o-que-sao-expressoes-regulares-01.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="pt"><title type="html">A Tabela ASCII</title><link href="http://localhost:4000/dicion%C3%A1rio/dictionary/2020/11/29/tabela-ascii.html" rel="alternate" type="text/html" title="A Tabela ASCII" /><published>2020-11-29T00:00:00-03:00</published><updated>2020-11-29T00:00:00-03:00</updated><id>http://localhost:4000/dicion%C3%A1rio/dictionary/2020/11/29/tabela-ascii</id><content type="html" xml:base="http://localhost:4000/dicion%C3%A1rio/dictionary/2020/11/29/tabela-ascii.html"><![CDATA[<!-- wp:paragraph -->
<p>Em 1960 havia o problema de troca de informações entre os primeiros computadores, como solução foi proposto por Robert Willian Bemer e sua equipe ao ANSI (American National Standards Institute)  a criação de um padrão. assim surgiu o ASCII (American Standard Code Information Interchange)</p>
<!-- /wp:paragraph -->
<!--more-->

<!-- wp:paragraph -->
<p>ASCII está presente praticamente em todos os computadores, impressoras e programas, sendo ele um código numérico que pode ser separado em três partes: <br />0 a 31 os chamados caracteres de controle, de 32 a 127 a tabela ASCII Comum e de 128 até 255 a tabela ASCII Estendida.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> Os chamados Caracteres de Controle, por que geram ações, não sendo essa visíveis a impressão, como por exemplo o "Carriage Return - CR" que volta para a mesma linha ou pode ser combinado com o Feed Line fazendo com que se volte para o início da linha criando ao mesmo tempo uma linha nova o CRLF ou (Carriage Return Line Feed) o que tem a mesma função da quebra de linha "\n"   ou ainda o BEL que gera um audível 'bip' através do  computador, o carácter 24 representa a função "cancel" o 27 temos o Escape ou ESC e assim por diante. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A Tabelas ASCII também pode ser acessada via teclado ao se segurar o ALT  e adicionar o código numérico, lembrando que todos os caracteres presentes no teclado estão disponíveis  através de código ASCII como por exemplo  <strong>ALT + 97 = a</strong>, sendo esse o inicio do alfabeto minusculo e  <strong>ALT+ 65 =  A</strong>, o início do maiúsculo. <br />Lembrando que o ASCII do 0 ao 31 não possuem qualquer retorno de impressão ou visualmente imprimível, esse espaço 'vago' é utilizado para outras figuras úteis, a tabela a começa a reproduzir os respectivos códigos decimais do 32 em diante.
<br />Por exemplo: <br /> ALT + 1 = ☺  imprimi um rostinho feliz em vez de Start of Heading -SOH <br />ALT + 14 = ♫ ALT + 16 = ► e assim por diante até o ALT +31 = ▼ </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Tabela Completa </p>
<!-- /wp:paragraph -->

<!-- wp:table -->

<figure class="wp-block-table"><table><tbody><tr><td><strong>Decimal</strong></td><td><strong>Binário</strong></td><td><strong>Hex</strong></td><td><strong>Referência</strong></td></tr><tr><td>0</td><td>00000000</td><td>00</td><td>Null – NUL</td></tr><tr><td>1</td><td>00000001</td><td>01</td><td>Start of Heading – SOH</td></tr><tr><td>2</td><td>00000010</td><td>02</td><td>Start of Text – STX</td></tr><tr><td>3</td><td>00000011</td><td>03</td><td>End of Text – ETX</td></tr><tr><td>4</td><td>00000100</td><td>04</td><td>End of Transmission – EOT</td></tr><tr><td>5</td><td>00000101</td><td>05</td><td>Enquiry – ENQ</td></tr><tr><td>6</td><td>00000110</td><td>06</td><td>Acknowledge – ACK</td></tr><tr><td>7</td><td>00000111</td><td>07</td><td>Bell, rings terminal bell – BEL</td></tr><tr><td>8</td><td>00001000</td><td>08</td><td>BackSpace – BS</td></tr><tr><td>9</td><td>00001001</td><td>09</td><td>Horizontal Tab – HT</td></tr><tr><td>10</td><td>00001010</td><td>0A</td><td>Line Feed – LF</td></tr><tr><td>11</td><td>00001011</td><td>0B</td><td>Vertical Tab – VT</td></tr><tr><td>12</td><td>00001100</td><td>0C</td><td>Form Feed – FF</td></tr><tr><td>13</td><td>00001101</td><td>0D</td><td>Enter – CR</td></tr><tr><td>14</td><td>00001110</td><td>0E</td><td>Shift-Out – SO</td></tr><tr><td>15</td><td>00001111</td><td>0F</td><td>Shift-In – SI</td></tr><tr><td>16</td><td>00010000</td><td>10</td><td>Data Link Escape – DLE</td></tr><tr><td>17</td><td>00010001</td><td>11</td><td>Device Control 1 – D1</td></tr><tr><td>18</td><td>00010010</td><td>12</td><td>Device Control 2 – D2</td></tr><tr><td>19</td><td>00010011</td><td>13</td><td>Device Control 3 – D3</td></tr><tr><td>20</td><td>00010100</td><td>14</td><td>Device Control 4 – D4</td></tr><tr><td>21</td><td>00010101</td><td>15</td><td>Negative Acknowledge – NAK</td></tr><tr><td>22</td><td>00010110</td><td>16</td><td>Synchronous idle – SYN</td></tr><tr><td>23</td><td>00010111</td><td>17</td><td>End Transmission Block – ETB</td></tr><tr><td>24</td><td>00011000</td><td>18</td><td>Cancel line – CAN</td></tr><tr><td>25</td><td>00011001</td><td>19</td><td>End of Medium – EM</td></tr><tr><td>26</td><td>00011010</td><td>1A</td><td>Substitute – SUB</td></tr><tr><td>27</td><td>00011011</td><td>1B</td><td>Escape – ESC</td></tr><tr><td>28</td><td>00011100</td><td>1C</td><td>File Separator – FS</td></tr><tr><td>29</td><td>00011101</td><td>1D</td><td>Group Separator – GS</td></tr><tr><td>30</td><td>00011110</td><td>1E</td><td>Record Separator – RS</td></tr><tr><td>31</td><td>00011111</td><td>1F</td><td>Unit Separator – US</td></tr><tr><td>32</td><td>00100000</td><td>20</td><td>Space – SPC</td></tr><tr><td>33</td><td>00100001</td><td>21</td><td>!</td></tr><tr><td>34</td><td>00100010</td><td>22</td><td>"</td></tr><tr><td>35</td><td>00100011</td><td>23</td><td>#</td></tr><tr><td>36</td><td>00100100</td><td>24</td><td>$</td></tr><tr><td>37</td><td>00100101</td><td>25</td><td>%</td></tr><tr><td>38</td><td>00100110</td><td>26</td><td>&amp;</td></tr><tr><td>39</td><td>00100111</td><td>27</td><td>'</td></tr><tr><td>40</td><td>00101000</td><td>28</td><td>(</td></tr><tr><td>41</td><td>00101001</td><td>29</td><td>)</td></tr><tr><td>42</td><td>00101010</td><td>2A</td><td>*</td></tr><tr><td>43</td><td>00101011</td><td>2B</td><td>+</td></tr><tr><td>44</td><td>00101100</td><td>2C</td><td>,</td></tr><tr><td>45</td><td>00101101</td><td>2D</td><td>–</td></tr><tr><td>46</td><td>00101110</td><td>2E</td><td>.</td></tr><tr><td>47</td><td>00101111</td><td>2F</td><td>/</td></tr><tr><td>48</td><td>00110000</td><td>30</td><td>0</td></tr><tr><td>49</td><td>00110001</td><td>31</td><td>1</td></tr><tr><td>50</td><td>00110010</td><td>32</td><td>2</td></tr><tr><td>51</td><td>00110011</td><td>33</td><td>3</td></tr><tr><td>52</td><td>00110100</td><td>34</td><td>4</td></tr><tr><td>53</td><td>00110101</td><td>35</td><td>5</td></tr><tr><td>54</td><td>00110110</td><td>36</td><td>6</td></tr><tr><td>55</td><td>00110111</td><td>37</td><td>7</td></tr><tr><td>56</td><td>00111000</td><td>38</td><td>8</td></tr><tr><td>57</td><td>00111001</td><td>39</td><td>9</td></tr><tr><td>58</td><td>00111010</td><td>3A</td><td>:</td></tr><tr><td>59</td><td>00111011</td><td>3B</td><td>;</td></tr><tr><td>60</td><td>00111100</td><td>3C</td><td>&lt;</td></tr><tr><td>61</td><td>00111101</td><td>3D</td><td>=</td></tr><tr><td>62</td><td>00111110</td><td>3E</td><td>&gt;</td></tr><tr><td>63</td><td>00111111</td><td>3F</td><td>?</td></tr><tr><td>64</td><td>01000000</td><td>40</td><td>@</td></tr><tr><td>65</td><td>01000001</td><td>41</td><td>A</td></tr><tr><td>66</td><td>01000010</td><td>42</td><td>B</td></tr><tr><td>67</td><td>01000011</td><td>43</td><td>C</td></tr><tr><td>68</td><td>01000100</td><td>44</td><td>D</td></tr><tr><td>69</td><td>01000101</td><td>45</td><td>E</td></tr><tr><td>70</td><td>01000110</td><td>46</td><td>F</td></tr><tr><td>71</td><td>01000111</td><td>47</td><td>G</td></tr><tr><td>72</td><td>01001000</td><td>48</td><td>H</td></tr><tr><td>73</td><td>01001001</td><td>49</td><td>I</td></tr><tr><td>74</td><td>01001010</td><td>4A</td><td>J</td></tr><tr><td>75</td><td>01001011</td><td>4B</td><td>K</td></tr><tr><td>76</td><td>01001100</td><td>4C</td><td>L</td></tr><tr><td>77</td><td>01001101</td><td>4D</td><td>M</td></tr><tr><td>78</td><td>01001110</td><td>4E</td><td>N</td></tr><tr><td>79</td><td>01001111</td><td>4F</td><td>O</td></tr><tr><td>80</td><td>01010000</td><td>50</td><td>P</td></tr><tr><td>81</td><td>01010001</td><td>51</td><td>Q</td></tr><tr><td>82</td><td>01010010</td><td>52</td><td>R</td></tr><tr><td>83</td><td>01010011</td><td>53</td><td>S</td></tr><tr><td>84</td><td>01010100</td><td>54</td><td>T</td></tr><tr><td>85</td><td>01010101</td><td>55</td><td>U</td></tr><tr><td>86</td><td>01010110</td><td>56</td><td>V</td></tr><tr><td>87</td><td>01010111</td><td>57</td><td>W</td></tr><tr><td>88</td><td>01011000</td><td>58</td><td>X</td></tr><tr><td>89</td><td>01011001</td><td>59</td><td>Y</td></tr><tr><td>90</td><td>01011010</td><td>5A</td><td>Z</td></tr><tr><td>91</td><td>01011011</td><td>5B</td><td>[</td></tr><tr><td>92</td><td>01011100</td><td>5C</td><td>\</td></tr><tr><td>93</td><td>01011101</td><td>5D</td><td>]</td></tr><tr><td>94</td><td>01011110</td><td>5E</td><td>^</td></tr><tr><td>95</td><td>01011111</td><td>5F</td><td>_</td></tr><tr><td>96</td><td>01100000</td><td>60</td><td>`</td></tr><tr><td>97</td><td>01100001</td><td>61</td><td>a</td></tr><tr><td>98</td><td>01100010</td><td>62</td><td>b</td></tr><tr><td>99</td><td>01100011</td><td>63</td><td>c</td></tr><tr><td>100</td><td>01100100</td><td>64</td><td>d</td></tr><tr><td>101</td><td>01100101</td><td>65</td><td>e</td></tr><tr><td>102</td><td>01100110</td><td>66</td><td>f</td></tr><tr><td>103</td><td>01100111</td><td>67</td><td>g</td></tr><tr><td>104</td><td>01101000</td><td>68</td><td>h</td></tr><tr><td>105</td><td>01101001</td><td>69</td><td>i</td></tr><tr><td>106</td><td>01101010</td><td>6A</td><td>j</td></tr><tr><td>107</td><td>01101011</td><td>6B</td><td>k</td></tr><tr><td>108</td><td>01101100</td><td>6C</td><td>l</td></tr><tr><td>109</td><td>01101101</td><td>6D</td><td>m</td></tr><tr><td>110</td><td>01101110</td><td>6E</td><td>n</td></tr><tr><td>111</td><td>01101111</td><td>6F</td><td>o</td></tr><tr><td>112</td><td>01110000</td><td>70</td><td>p</td></tr><tr><td>113</td><td>01110001</td><td>71</td><td>q</td></tr><tr><td>114</td><td>01110010</td><td>72</td><td>r</td></tr><tr><td>115</td><td>01110011</td><td>73</td><td>s</td></tr><tr><td>116</td><td>01110100</td><td>74</td><td>t</td></tr><tr><td>117</td><td>01110101</td><td>75</td><td>u</td></tr><tr><td>118</td><td>01110110</td><td>76</td><td>v</td></tr><tr><td>119</td><td>01110111</td><td>77</td><td>w</td></tr><tr><td>120</td><td>01111000</td><td>78</td><td>x</td></tr><tr><td>121</td><td>01111001</td><td>79</td><td>y</td></tr><tr><td>122</td><td>01111010</td><td>7A</td><td>z</td></tr><tr><td>123</td><td>01111011</td><td>7B</td><td>{</td></tr><tr><td>124</td><td>01111100</td><td>7C</td><td>|</td></tr><tr><td>125</td><td>01111101</td><td>7D</td><td>}</td></tr><tr><td>126</td><td>01111110</td><td>7E</td><td>~</td></tr><tr><td>127</td><td>01111111</td><td>7F</td><td>Delete</td></tr><tr><td>128</td><td>10000000</td><td>80</td><td>Ç</td></tr><tr><td>129</td><td>10000001</td><td>81</td><td>ü</td></tr><tr><td>130</td><td>10000010</td><td>82</td><td>é</td></tr><tr><td>131</td><td>10000011</td><td>83</td><td>â</td></tr><tr><td>132</td><td>10000100</td><td>84</td><td>ä</td></tr><tr><td>133</td><td>10000101</td><td>85</td><td>à</td></tr><tr><td>134</td><td>10000110</td><td>86</td><td>å</td></tr><tr><td>135</td><td>10000111</td><td>87</td><td>ç</td></tr><tr><td>136</td><td>10001000</td><td>88</td><td>ê</td></tr><tr><td>137</td><td>10001001</td><td>89</td><td>ë</td></tr><tr><td>138</td><td>10001010</td><td>8A</td><td>è</td></tr><tr><td>139</td><td>10001011</td><td>8B</td><td>ï</td></tr><tr><td>140</td><td>10001100</td><td>8C</td><td>î</td></tr><tr><td>141</td><td>10001101</td><td>8D</td><td>ì</td></tr><tr><td>142</td><td>10001110</td><td>8E</td><td>Ä</td></tr><tr><td>143</td><td>10001111</td><td>8F</td><td>Å</td></tr><tr><td>144</td><td>10010000</td><td>90</td><td>É</td></tr><tr><td>145</td><td>10010001</td><td>91</td><td>æ</td></tr><tr><td>146</td><td>10010010</td><td>92</td><td>Æ</td></tr><tr><td>147</td><td>10010011</td><td>93</td><td>ô</td></tr><tr><td>148</td><td>10010100</td><td>94</td><td>ö</td></tr><tr><td>149</td><td>10010101</td><td>95</td><td>ò</td></tr><tr><td>150</td><td>10010110</td><td>96</td><td>û</td></tr><tr><td>151</td><td>10010111</td><td>97</td><td>ù</td></tr><tr><td>152</td><td>10011000</td><td>98</td><td>ÿ</td></tr><tr><td>153</td><td>10011001</td><td>99</td><td>Ö</td></tr><tr><td>154</td><td>10011010</td><td>9A</td><td>Ü</td></tr><tr><td>155</td><td>10011011</td><td>9B</td><td>ø</td></tr><tr><td>156</td><td>10011100</td><td>9C</td><td>£</td></tr><tr><td>157</td><td>10011101</td><td>9D</td><td>Ø</td></tr><tr><td>158</td><td>10011110</td><td>9E</td><td>×</td></tr><tr><td>159</td><td>10011111</td><td>9F</td><td>ƒ</td></tr><tr><td>160</td><td>10100000</td><td>A0</td><td>á</td></tr><tr><td>161</td><td>10100001</td><td>A1</td><td>ù</td></tr><tr><td>162</td><td>10100010</td><td>A2</td><td>ó</td></tr><tr><td>163</td><td>10100011</td><td>A3</td><td>ú</td></tr><tr><td>164</td><td>10100100</td><td>A4</td><td>ñ</td></tr><tr><td>165</td><td>10100101</td><td>A5</td><td>Ñ</td></tr><tr><td>166</td><td>10100110</td><td>A6</td><td>ª</td></tr><tr><td>167</td><td>10100111</td><td>A7</td><td>º</td></tr><tr><td>168</td><td>10101000</td><td>A8</td><td>¿</td></tr><tr><td>169</td><td>10101001</td><td>A9</td><td>®</td></tr><tr><td>170</td><td>10101010</td><td>AA</td><td>¬</td></tr><tr><td>171</td><td>10101011</td><td>AB</td><td>½</td></tr><tr><td>172</td><td>10101100</td><td>AC</td><td>¼</td></tr><tr><td>173</td><td>10101101</td><td>AD</td><td>¡</td></tr><tr><td>174</td><td>10101110</td><td>AE</td><td>«</td></tr><tr><td>175</td><td>10101111</td><td>AF</td><td>»</td></tr><tr><td>176</td><td>10110000</td><td>B0</td><td>░</td></tr><tr><td>177</td><td>10110001</td><td>B1</td><td>▒</td></tr><tr><td>178</td><td>10110010</td><td>B2</td><td>▓</td></tr><tr><td>179</td><td>10110011</td><td>B3</td><td>│</td></tr><tr><td>180</td><td>10110100</td><td>B4</td><td>┤</td></tr><tr><td>181</td><td>10110101</td><td>B5</td><td>Á</td></tr><tr><td>182</td><td>10110110</td><td>B6</td><td>Â</td></tr><tr><td>183</td><td>10110111</td><td>B7</td><td>À</td></tr><tr><td>184</td><td>10111000</td><td>B8</td><td>©</td></tr><tr><td>185</td><td>10111001</td><td>B9</td><td>╣</td></tr><tr><td>186</td><td>10111010</td><td>BA</td><td>║</td></tr><tr><td>187</td><td>10111011</td><td>BB</td><td>╗</td></tr><tr><td>188</td><td>10111100</td><td>BC</td><td>╝</td></tr><tr><td>189</td><td>10111101</td><td>BD</td><td>¢</td></tr><tr><td>190</td><td>10111110</td><td>BE</td><td>¥</td></tr><tr><td>191</td><td>10111111</td><td>BF</td><td>┐</td></tr><tr><td>192</td><td>11000000</td><td>C0</td><td>└</td></tr><tr><td>193</td><td>11000001</td><td>C1</td><td>┴</td></tr><tr><td>194</td><td>11000010</td><td>C2</td><td>┬</td></tr><tr><td>195</td><td>11000011</td><td>C3</td><td>├</td></tr><tr><td>196</td><td>11000100</td><td>C4</td><td>─</td></tr><tr><td>197</td><td>11000101</td><td>C5</td><td>┼</td></tr><tr><td>198</td><td>11000110</td><td>C6</td><td>ã</td></tr><tr><td>199</td><td>11000111</td><td>C7</td><td>Ã</td></tr><tr><td>200</td><td>11001000</td><td>C8</td><td>╚</td></tr><tr><td>201</td><td>11001001</td><td>C9</td><td>╔</td></tr><tr><td>202</td><td>11001010</td><td>CA</td><td>╩</td></tr><tr><td>203</td><td>11001011</td><td>CB</td><td>╦</td></tr><tr><td>204</td><td>11001100</td><td>CC</td><td>╠</td></tr><tr><td>205</td><td>11001101</td><td>CD</td><td>═</td></tr><tr><td>206</td><td>11001110</td><td>CE</td><td>╬</td></tr><tr><td>207</td><td>11001111</td><td>CF</td><td>¤</td></tr><tr><td>208</td><td>11010000</td><td>D0</td><td>ð</td></tr><tr><td>209</td><td>11010001</td><td>D1</td><td>Ð</td></tr><tr><td>210</td><td>11010010</td><td>D2</td><td>Ê</td></tr><tr><td>211</td><td>11010011</td><td>D3</td><td>Ë</td></tr><tr><td>212</td><td>11010100</td><td>D4</td><td>È</td></tr><tr><td>213</td><td>11010101</td><td>D5</td><td>ı</td></tr><tr><td>214</td><td>11010110</td><td>D6</td><td>Í</td></tr><tr><td>215</td><td>11010111</td><td>D7</td><td>Î</td></tr><tr><td>216</td><td>11011000</td><td>D8</td><td>Ï</td></tr><tr><td>217</td><td>11011001</td><td>D9</td><td>┘</td></tr><tr><td>218</td><td>11011010</td><td>DA</td><td>┌</td></tr><tr><td>219</td><td>11011011</td><td>DB</td><td>█</td></tr><tr><td>220</td><td>11011100</td><td>DC</td><td>▄</td></tr><tr><td>221</td><td>11011101</td><td>DD</td><td>¦</td></tr><tr><td>222</td><td>11011110</td><td>DE</td><td>Ì</td></tr><tr><td>223</td><td>11011111</td><td>DF</td><td>▀</td></tr><tr><td>224</td><td>11100000</td><td>E0</td><td>Ó</td></tr><tr><td>225</td><td>11100001</td><td>E1</td><td>ß</td></tr><tr><td>226</td><td>11100010</td><td>E2</td><td>Ô</td></tr><tr><td>227</td><td>11100011</td><td>E3</td><td>Ò</td></tr><tr><td>228</td><td>11100100</td><td>E4</td><td>õ</td></tr><tr><td>229</td><td>11100101</td><td>E5</td><td>Õ</td></tr><tr><td>230</td><td>11100110</td><td>E6</td><td>µ</td></tr><tr><td>231</td><td>11100111</td><td>E7</td><td>þ</td></tr><tr><td>232</td><td>11101000</td><td>E8</td><td>Þ</td></tr><tr><td>233</td><td>11101001</td><td>E9</td><td>Ú</td></tr><tr><td>234</td><td>11101010</td><td>EA</td><td>Û</td></tr><tr><td>235</td><td>11101011</td><td>EB</td><td>Ù</td></tr><tr><td>236</td><td>11101100</td><td>EC</td><td>ý</td></tr><tr><td>237</td><td>11101101</td><td>ED</td><td>Ý</td></tr><tr><td>238</td><td>11101110</td><td>EE</td><td>¯</td></tr><tr><td>239</td><td>11101111</td><td>EF</td><td>´</td></tr><tr><td>240</td><td>11110000</td><td>F0</td><td></td></tr><tr><td>241</td><td>11110001</td><td>F1</td><td>±</td></tr><tr><td>242</td><td>11110010</td><td>F2</td><td>‗</td></tr><tr><td>243</td><td>11110011</td><td>F3</td><td>¾</td></tr><tr><td>244</td><td>11110100</td><td>F4</td><td>¶</td></tr><tr><td>245</td><td>11110101</td><td>F5</td><td>§</td></tr><tr><td>246</td><td>11110110</td><td>F6</td><td>÷</td></tr><tr><td>247</td><td>11110111</td><td>F7</td><td>¸</td></tr><tr><td>248</td><td>11111000</td><td>F8</td><td>°</td></tr><tr><td>249</td><td>11111001</td><td>F9</td><td>¨</td></tr><tr><td>250</td><td>11111010</td><td>FA</td><td>·</td></tr><tr><td>251</td><td>11111011</td><td>FB</td><td>¹</td></tr><tr><td>252</td><td>11111100</td><td>FC</td><td>³</td></tr><tr><td>253</td><td>11111101</td><td>FD</td><td>²</td></tr><tr><td>254</td><td>11111110</td><td>FE</td><td>■</td></tr><tr><td>255</td><td>11111111</td><td>FF</td><td>&nbsp;&nbsp;</td></tr></tbody></table></figure>
<!-- /wp:table -->]]></content><author><name></name></author><category term="Dicionário" /><category term="Dictionary" /><category term="ASCII" /><summary type="html"><![CDATA[Em 1960 havia o problema de troca de informações entre os primeiros computadores, como solução foi proposto por Robert Willian Bemer e sua equipe ao ANSI (American National Standards Institute) a criação de um padrão. assim surgiu o ASCII (American Standard Code Information Interchange)]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/posts/a-tabela-ascii-01.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/posts/a-tabela-ascii-01.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="pt"><title type="html">O que é Arquitetura de Software?</title><link href="http://localhost:4000/dicion%C3%A1rio/dictionary/2020/11/24/o-que-e-arquitetura-de-software.html" rel="alternate" type="text/html" title="O que é Arquitetura de Software?" /><published>2020-11-24T00:00:00-03:00</published><updated>2020-11-24T00:00:00-03:00</updated><id>http://localhost:4000/dicion%C3%A1rio/dictionary/2020/11/24/o-que-e-arquitetura-de-software</id><content type="html" xml:base="http://localhost:4000/dicion%C3%A1rio/dictionary/2020/11/24/o-que-e-arquitetura-de-software.html"><![CDATA[<p>Arquitetura de Software começou a surgir no final dos anos 60 quando ciêntistas começaram a enfatizar a importância de se projetar e estruturar um software antes de se começar o seu desenvolvimento. <!--more-->tendo sida melhor definida e aceita no final dos anos 80 e inicio dos anos 90.
O termo faz um paralelo com a “Arquitetura” que tem suas especificações de construção e projeto escritas em uma planta arquitetônica. Trazendo para o mundo do software basicamente seriam as nossas especificações do projeto e suas relações tecnológicas.</p>

<p>Ou seja a Aruitetura de Software é a compreensão de como esse sistema deve ser organizado, como ele sera montado e como ele irar se comunicar com outros sistemas, incluindo também suas regras, limitações, etc.</p>

<p>Esse processo pode ser considerado a segunda etapa no desenvolvimento de um Software vindo logo após a coleta de informações e requerimentos das partes interessadas no projeto ou seja os stackholders.</p>

<p>Você também pode conferir a definição padrão sobre Arquitetura de Softwre da International Organization for Standardization (ISO) e o Institute of Electrical and Eletronics Engineers (IEEE), que é a ISO/IEC/IEEE 42010:2011 que determina o que é Arquitetura de Software.</p>

<h2 id="arquitetura-de-software-e-os-design-patterns">Arquitetura de Software e os Design Patterns</h2>

<p>Atualmente a Aplicação Arquitetural inclui (mas não se limitam) a escolha das soluções do projeto como os Frameworks que serão usados padrões de Design a serem implementados, abaixo segue uma pequena lista com alguns desse Design Patterns.</p>

<h3 id="arquitetura-em-camadas-layered-pattern">Arquitetura em camadas (Layered pattern)</h3>

<p>Organiza um sistema de conjunto em camadas que podem ser desconstruídas em diferentes serviços, trazendo um modelo incremental de desenvolvimento. Os casos mais comuns para o uso desse padrão são em software de e-commerce e desktop.</p>

<h3 id="arquitetura-cliente-servidor-client-server-pattern">Arquitetura cliente-servidor (Client-server pattern)</h3>

<p>Estilo organizado em serviços combinando dados do cliente e do servidor. Para isso, é primordial que o cliente disponibilize uma rede de acesso às informações. Este cenário é um dos mais conhecidos na rotina das pessoas, já que podem ser aplicativos bancários e e-mail.</p>

<h3 id="arquitetura-mvc-model-view-controller-pattern">Arquitetura MVC (Model-view-controller pattern)</h3>

<p>Distribuído em três camadas (Modelo, Visão e Controle), este padrão é um dos mais comuns para o online, porque traz um modelo interativo de sistema.</p>

<h3 id="arquitetura-de-microsserviços-microservices-pattern">Arquitetura de microsserviços (Microservices pattern)</h3>

<p>Este padrão utiliza múltiplos serviços e componentes para desenvolver uma estrutura modular favorecida. Hoje, é um dos modelos preferidos dos desenvolvedores e arquitetos de software por possibilitar a escalabilidade e independência dos módulos – que até podem utilizar diferentes linguagens e programações.</p>

<p>Esses são conceitos gerais, a aplicação hoje em dia vai muito alem de seus termos, temos por isso a profissão Arquiteto de Software onde este tem como dever justamente o projeto do software a ser montado, esse profissional deve levar em consideração: custos, manutenção, disponibilidade tecnológica, impacto direto e indereto sobre os stackholders, etc, etc, etc.</p>

<h3 id="algumas-considerações">Algumas Considerações</h3>

<p>As definições do termo <span>Arquitetura de Software</span> além de extensas também são muitas vezes subjetivas, ou seja, elas dão margem para interpretações pessoais sobre suas definições e conceitos o que toram muitas aspectos uma questãode de consenso ou mera opnião.</p>

<p>Foras essas especificidade acredito que podemos resumir esse conceito como:</p>

<p><span>Arquitetura de Software é a disciplina que cuida do ato de se projetar um software levando em consideração a solução de possiveis problemas, usabilidade, reusabilidade, manutenção, tecnologias a serem aplicadas e o impacto dessas escolhas no resultado final do projeto, bem como em seus envolvidos.</span></p>

<!--

#######################

DIferença entre Arquitetura de Software e Design de Software

##########################

Requiriments Engineering -> Analysis -> Design -> Development -> Testing -> Acceptance -> Deployment -> Maintenance and Update.
Fonte: https://youtu.be/lTkL1oIMiaU?t=145


Best explication

-->]]></content><author><name></name></author><category term="Dicionário" /><category term="Dictionary" /><category term="Arquitetura de Software" /><summary type="html"><![CDATA[Arquitetura de Software começou a surgir no final dos anos 60 quando ciêntistas começaram a enfatizar a importância de se projetar e estruturar um software antes de se começar o seu desenvolvimento.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/posts/o-que-e-arquitetura-de-software.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/posts/o-que-e-arquitetura-de-software.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="pt"><title type="html">Como Desenvolver para Web?</title><link href="http://localhost:4000/desenvolvimento%20web/web%20development/2020/03/18/como-desenvolver-para-web.html" rel="alternate" type="text/html" title="Como Desenvolver para Web?" /><published>2020-03-18T23:10:00-03:00</published><updated>2020-03-18T23:10:00-03:00</updated><id>http://localhost:4000/desenvolvimento%20web/web%20development/2020/03/18/como-desenvolver-para-web</id><content type="html" xml:base="http://localhost:4000/desenvolvimento%20web/web%20development/2020/03/18/como-desenvolver-para-web.html"><![CDATA[<p>Como fazer um site? Como desenvolver sites? Como programar para web? Como diabos funciona isso tudo?!</p>

<p>Quem começa a fazer essas perguntas na web pode ficar frustrado, não pela falta de material disponível, mas justamente uma enxurrada de informação, o que dificulta enxergar o quadro inteiro (se é que isso é possível) sobre o desenvolvimento web. Sem falar que podemos acabar caindo em “quebra galhos”, nada contra uma boa solução rápida (afinal quem nunca?) mas o problema é <!--more-->que você pode acabar passando mais tempo copiando e remendando código da web (e tendo muita dor de cabeça com isso) do que se tivesse parado pra estudar aquela linguagem/tecnologia/conceito, então a questão é: <em>Se você está procurando um solução rápida pra um problema especifico talvez esse post não te ajude</em>, mas se procura entender melhor do que se trata o desenvolvimento web e o que você provavelmente vai precisar aprender, esse post pode ajudar, afinal <em>“precisamos saber o que precisamos saber”</em>.</p>

<p>Ja de cara em desenvolvimento web o HTML, CSS e Javascript que são o básico do básico, desses provavelmente você ira aprender CSS em quanto estuda HTML, ou seja um “depende” do outro (até certo ponsto), assim temmos:</p>

<p><strong>Javascript</strong> que no caso é o único dos três que de fato é uma <em>linguagem de programação</em>.</p>

<p><strong>HTML</strong> que é uma <em>Linguagem de Marcação de Hipertexto</em></p>

<p><strong>CSS</strong> que é uma <em>Linguagem de Estilo</em>.</p>

<p>Já já explico melhor o que isso significa.</p>

<p>Vamos a lista do que sera abordado aqui.</p>

<li>HTML</li>
<li>CSS</li>
<li>Javascript</li>

<li>DOM</li>
<li>XML</li>
<li>SASS (Pré-processador CSS)</li>
<li>PHP</li>
<li>Linguagens SQL</li>
<li>Banco de Dados</li>
<li>IDE e Editores de Texto</li>

<h2 id="html">HTML</h2>

<p>O HTML (HyperText Mackup Language) ou Linguagem de Marcação de Hypertexto é uma linguagem que possuí a única função de entregar o conteúdo em Hypertexto para o navegador, com ele criamos todo o conteúdo e estrutura do site; onde podemos colocar imagens, midias, links etc; se estivéssemos falando da uma casa o html seria o responsável por criar toda a “estrutura da casa” como os cômodos, locais das portas, janelas etc;</p>

<h2 id="css">CSS</h2>

<p>O CSS (Cascating Style Sheet) ou Estilo de Camada em Cascata é uma linguagem que trabalha em conjunto com o html sendo ele responsável por toda a “boniteza” do site, é com ele que organizamos background, cores de fonts, tamanhos, alinhamentos, etc; sendo o html a estrutura da casa podemos dizer que o css é o “Estilo” da casa, ou seja ele é o responsável por toda a “decoração” do lugar;</p>

<h2 id="javascript">Javascript</h2>

<p>Javascript é uma linguagem de programação voltada para web, ele e interpretado pelo navegador, sendo responsável por cuidar receber e executar”eventos” toda a interação com o usuário com ele desenvolvemos slide, capturamos click, criamos condicionais fazemos algo dependendo do que o usuário fizer. na casa o javascript seria o responsável acender lampadas, fazer sair água das torneiras, abrir e fechar portas e janelas alem de por todos os eletrodomésticos para funcionar.</p>

<h3 id="e-o-que-mais">E o que mais?</h3>

<p>É importante vermos um pouco além do basicão, por que muitas vezes nos limitamos ao que conhecemos, a baixo comento sobre esse “a mais” o que na maioria das vezes se torna o essencial para aquilo que você se propõe a resolver e mesmo que não vá utilizar logo de cara é impotante saber que existe e ter uma noção para o que serve.</p>

<h2 id="dom">DOM</h2>

<p>Quando o navegador lê o nosso documento HTML ou XML ele cria uma especia de arvore aninhando essa estrutura sendo essa essa arvore que chamamos de DOM (Document Object Model) é através dele que navegamos para encontrar e manipular elementos do nosso HTML e XML. veja mais aqui</p>

<p>Dom</p>

<h2 id="xml">XML</h2>

<p>O XML (eXtesible Mackup Language) ou Linguagem de Marcação Extensível que tem como sua principal função facilitar a comunicação e transferência de dados entre linguagens diferentes através de sua estrutura. simplificando ela é uma especia de padronização para quando queremos salvar ou transferir dados em um formato universal, o que significa que outras linguagens independente de como funcionem podem acessa-la. a sintaxe do xml é relativamente simples fazendo com que ela se comporte de uma maneira parecida com o html tendo como sua unica preocupação estruturar o conteúdo.</p>

<h2 id="pré-processadores-css">Pré-processadores CSS</h2>

<p>Os css é excelente para o que se propõe a resolver, mas as vezes sentimos falta daquele “a mais” na linguagem, o por “mais” quero dizer: variáveis, funções, condicionais e dezenas de outras utilidades que o css não possui, para suprir essa necessidade exitem os pré-processadores css. que dão mais poder ao bom e velho css. deles o que o mais famosos são o Sass e o Less, possuem uma pancada de tutoriais e uma sintaxe relativamente simples.</p>

<p>E como funcionam? tudo que uma pré-processador faz é possibilitar a escrita em uma linguagem que é como se fosse o css com alguns “retoques” depois essa linguagem é compilada no próprio ambiente do desenvolvedor (no seu pc mesmo) resultando em um aquivo .css comum 🙂</p>

<p>a quem prefira não utiliza-los, e mesmo que esse venha a ser o seu caso é importante saber o que são e como funcionam, para a partir daí poder escolher se, quanto e como utilizá-los. recomendo ainda que aprende sobre pré processadores somente depois de se sentir extremante confortável com o seu conhecimento em css.</p>

<h2 id="php">PHP</h2>

<p>O PHP é uma linguagem de programação server-side, é com ele que buscamos e armazenamos informações no banco de dados, através dele fazemos requisições sql para depois tratarmos essas informações no nosso site, mesmo que você venha a focar no desenvolvimento front-end saber php é extremamente útil já que muitas vezes o que precisamos é de uma tabelinha simples e nada mais.</p>

<h2 id="linguagens-sql">Linguagens SQL</h2>

<p>O SQL é uma linguagem de programação que acessa e manipula o banco de dados, quanto útilizamos o php para acessar essas informações na verdade ele faz uma requisição em sql e é essa linguagem que de fato busca ou insere as informações; a linguagens sql mais famosas são Mysql, SQlite, MariaDB e Postgree; recomendo que comece com o Mysql, já que é o mais comun e padrão na maioria dos servidores web.</p>

<h2 id="banco-de-dados">Banco de Dados</h2>

<p>Os bancos de dados são basicamente conjunto de tabelas armazenadas em um servidor, é importante que você estude sobre estrutura de dados para entender o que são e como elas se relacionam, antes de começar a criar tabelas a torto e a direito, lembre-se padrões como os N1, N2 e N3 não existem atoa e vão te evitar muita dor de cabeça.</p>

<h2 id="ides-e-editores-de-texto">IDEs e Editores de Texto</h2>

<p>As IDEs (Integrated Development Environment) ou Ambiente de Desenvolvimento Integrado são a principal ferramenta na hora de codar, e você com certeza vai ter que instalar pelo menos uma, elas nos ajudam com a color skin, que da aquela do código o que da aquela “corzinha” nas tags separando elementos, indentando os códigos etc. sem essa corzinha extra programar seria algo simplesmente terrível.</p>

<p>Confira um exemplo, onde de um lado temos o código simples em html no Bloco de Notas, e do outro temos o mesmo código no Sublime Text.</p>

<p>Obviamente uma IDE não se resume à isso, elas também contam com Compiladores, Debuger, Distribuição do Código etc etc e etc.</p>

<h2 id="qual-ide-escolher">Qual IDE escolher?</h2>

<p>é importante lembrar que podemos programar basicamente em qualquer linguagem com qualquer IDE, Editor e até o bloco de notas, mas mesmo assim muitas vezes escolhemos uma em vez de outra por conta de sua uma maior compatibilidade com uma determinada linguagem, framework, biblioteca etc, aconselho a testar o máximo possível antes de dizer ” essa é a IDE perfeita!” muitas vezes tudo não passa de uma questão de gosto pessoal.</p>

<p>Segue uma pequena lista com algumas delas.</p>

<ul>
<li><a title="Embarcadero Delphi" href="https://pt.wikipedia.org/wiki/Embarcadero_Delphi">Delphi</a> - foco principal:&nbsp;<a title="Object Pascal" href="https://pt.wikipedia.org/wiki/Object_Pascal">Object Pascal</a>/<a title="Pascal (linguagem de programação)" href="https://pt.wikipedia.org/wiki/Pascal_(linguagem_de_programa%C3%A7%C3%A3o)">Pascal</a>;</li>

<li><a class="mw-redirect" title="Eclipse (IDE)" href="https://pt.wikipedia.org/wiki/Eclipse_(IDE)">Eclipse</a> - foco principal:&nbsp;&nbsp;<a title="Java (linguagem de programação)" href="https://pt.wikipedia.org/wiki/Java_(linguagem_de_programa%C3%A7%C3%A3o)">Java</a>;</li>

<li><a class="mw-redirect" title="Netbeans" href="https://pt.wikipedia.org/wiki/Netbeans">Netbeans</a> - foco principal: <a title="Java (linguagem de programação)" href="https://pt.wikipedia.org/wiki/Java_(linguagem_de_programa%C3%A7%C3%A3o)">Java</a>;</li>

<li><a class="external text" href="http://en.wikipedia.org/wiki/Sun_Studio_(software)">Sun Studio</a>- foco principal: C, C++ ;</li>

<li><a class="new" title="Visual Studio.NET (página não existe)" href="https://pt.wikipedia.org/w/index.php?title=Visual_Studio.NET&amp;action=edit&amp;redlink=1">Visual Studio</a>&nbsp;- foco principal: C# e Framework.NET;</li>

<li><a title="MonoDevelop" href="https://pt.wikipedia.org/wiki/MonoDevelop">MonoDevelop</a> - Baseado no <a title="SharpDevelop" href="https://pt.wikipedia.org/wiki/SharpDevelop">SharpDevelop</a>, para ambiente <a title="Unix" href="https://pt.wikipedia.org/wiki/Unix">Unix</a>;</li>

<li><a class="mw-redirect" title="DEV-C++" href="https://pt.wikipedia.org/wiki/DEV-C%2B%2B">DEV-C++</a>, <a title="Code::Blocks" href="https://pt.wikipedia.org/wiki/Code::Blocks">Code::Blocks</a>, <a title="Turbo C" href="https://pt.wikipedia.org/wiki/Turbo_C">Turbo C</a> - Geram código para C e C++;</li>

<li><a title="Zend Studio" href="https://pt.wikipedia.org/wiki/Zend_Studio">Zend Studio</a> - Gera código <a title="PHP" href="https://pt.wikipedia.org/wiki/PHP">PHP</a>;</li>

<li><a title="Xcode" href="https://pt.wikipedia.org/wiki/Xcode">Xcode</a> - Gera código <a title="Objective-C" href="https://pt.wikipedia.org/wiki/Objective-C">Objective-C</a> e <a title="Swift (linguagem de programação)" href="https://pt.wikipedia.org/wiki/Swift_(linguagem_de_programa%C3%A7%C3%A3o)">Swift</a>;</li>

<li><a href="https://www.adobe.com/br/products/dreamweaver.html">Dreamweaver</a> - foco: HTML CSS Javascript.</li>

</ul>

<h2 id="editores-de-texto">Editores de Texto</h2>

<p>Alem das IDEs temos também os <em>Editores de Texto</em> e <em>Editores de Código Fonte</em> ambos possuem basicamente a mesma função de edição de códigos sendo que os “Editores de Código Fonte” são um pouco mais específicos que os “Editores de Texto”, más ambos são simples e mais leves do que as IDEs. O que costuma ser excelente para códigos Front-end como HTML, CSS, e Javascript.
Eles também costumam não precisar de muitas configurações, basta na hora da instalação um bom “avançar avançar, aceito, e voilá”, caso estiver começando aconselho iniciar pelos Editores de Texto como o <em>Sublime</em> ou um Editor de Código fonte como o <em>Visual Studio Code<em>, antes de se aventurar nas IDEs.</em></em></p>

<p>Um Lembrete: Ainda existe porai algum confusão entre IDEs e Editores de Texto/Código Fonte, como se fossem a mesma coisa, então lembre-se, IDEs tem muito mais recursos e funcionalidades especificas, essas funcionalidade que não são encontradas nativamente em Editores e por isso mesmo eles são muito mais leves.</p>

<p>Por exemplo, o <em>Sublime</em>(Editor de Texto) no meu PC ocupa 22 mb o <em>VSCode</em>(Editor de Código Fonte) pouco mais de 200mb, já o <em>Netbeans</em> (IDE) 713mb e o <em>Visual Studio</em> (IDE) mais de 6gb.</p>

<p>Então mesmo que você instale uma penca de Plugins e deixe um Editor com mais recursos (e mais pesado também) isso não irá alterar o proposito do programa, e muito menos a sua definição de Text Editor. <em>IDEs NÃO SÃO MELHORES OU PIORES</em>, apenas possuem objetivos diferentes.</p>

<p>Segue uma lista com alguns dos Editores de Texto e Editores de Código Fonte mais conhecidos.</p>

<ul>
<li>Visual Studio Code</li>
<li>Notepad++</li>
<li>Sublime Text</li>
<li>Aptana Studio</li>
<li>Atom</li>
</ul>
<h2 id="conclusão">Conclusão</h2>

<p>Nesse post abordamos um pouco sobre IDEs e Editores de Texto, HTML, DOM, CSS, Javascript, Pré-processadores, PHP, Linguagens SQL e Banco de Dados. como os primeiros passos para se Desenvolver para Web, a sequência da postagem trás uma certa “ordem” de aprendizagem das coisas apenas como uma opinião pessoal, sobre o que se deve aprender vs a dificuldade de se aprender. caso queira seguir essa ordem fique a vontade mas lembre-se, é sempre importante fazer a pergunta “O que eu quero fazer?” e só depois procurar o caminho necessário para se alcançar esse objetivo.</p>]]></content><author><name></name></author><category term="Desenvolvimento Web" /><category term="Web Development" /><category term="Desenvolvimento Web" /><summary type="html"><![CDATA[Como fazer um site? Como desenvolver sites? Como programar para web? Como diabos funciona isso tudo?! Quem começa a fazer essas perguntas na web pode ficar frustrado, não pela falta de material disponível, mas justamente uma enxurrada de informação, o que dificulta enxergar o quadro inteiro (se é que isso é possível) sobre o desenvolvimento web. Sem falar que podemos acabar caindo em “quebra galhos”, nada contra uma boa solução rápida (afinal quem nunca?) mas o problema é]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/posts/como-desenvolver-para-web.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/posts/como-desenvolver-para-web.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="pt"><title type="html">RegExp no JS</title><link href="http://localhost:4000/javascript/regex/2019/08/30/regexp-javascript.html" rel="alternate" type="text/html" title="RegExp no JS" /><published>2019-08-30T00:00:00-03:00</published><updated>2019-08-30T00:00:00-03:00</updated><id>http://localhost:4000/javascript/regex/2019/08/30/regexp-javascript</id><content type="html" xml:base="http://localhost:4000/javascript/regex/2019/08/30/regexp-javascript.html"><![CDATA[<p>Expressões Regulares são padrões utilizados para a filtragem e modificação de resultados que utilizam metacaracteres na construção de suas expressões
Ex. * + ? $ ^ . () | \ { } [ ]</p>

<h2 id="flags">Flags:</h2>

<p>g – Global Search
m – Multiple lines
i – insensitive case</p>

<!--more-->
<p>Regex podem conter expressões simples como</p>

<p>Ex.</p>

<pre><code class="language-Regexp"> /mar/
</code></pre>

<table>
  <thead>
    <tr>
      <th>Teste</th>
      <th>Resultado</th>
      <th>Comentário</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>“mar está calmo hoje”</td>
      <td>true</td>
      <td>-</td>
    </tr>
    <tr>
      <td>“O maravilhoso mundo da ciência”</td>
      <td>true</td>
      <td>-</td>
    </tr>
    <tr>
      <td>“Ela ama racionalmente”</td>
      <td>false</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

<h2 id="caracteres-especiais">Caracteres Especiais</h2>

<h3 id="-circunflexo">^ Circunflexo</h3>

<p>Marca o início exato de uma expressão
Ex. /^ponta/
“A pontada” false
“pontada” true</p>

<h3 id="-cifrão">$ Cifrão</h3>

<p>Marca o fim exato de uma expressão Ex. /cada$/
“A escada“ retorna true pois a frase termina exatamente com a palavra ‘cada’
“A escada azul” retorna false pois a frase não tem o fim exato da expressão</p>

<p>\b Boundary
Tem uma função parecida com circunflexo e o cifrão, ele busca por fronteiras de palavras, ele não possui tamanho.</p>

<p>\B – Boundary Inverso
Age exatamente de maneira inversa ao Boundary comum encontrando todas a posições que o \b não encontra</p>

<ul>
  <li>
    <p>Asterisco
Corresponde a expressão que o precede repetida 0 ou mais vezes. Equivalente a {0,} Ex. /bo*/
“boooo” retorna “boooo”
“A bird warbled” retorna “b”
“A goat grunted” não tem retorno.</p>
  </li>
  <li>
    <p>Adição
Corresponde a expressão que o precede repetido 1 ou mais vezes. Equivalente a {1,}. Pode ser usado também em conjunto com colchetes []+ permitindo que os caracteres repitam ilimitadamente. Ex. /a+/
“candy” retorna “a”
“caaaaaaandy” retorna “aaaaaaa”</p>
  </li>
</ul>

<h3 id="-interrogação">? Interrogação</h3>

<p>Corresponde a expressão que o precede repetido 0 ou 1 vez. Equivalente à {0,1}.
Nota: Se usado imediatamente após qualquer um dos quantificadores *, +, ? ou {}, faz o quantificador não guloso (combinando o número mínimo de vezes), como um oposto para o padrão que é guloso (combinar o número máximo possível). Por exemplo, aplicando /\d+/ em “123abc” encontra “123”. Mas aplicando /\d+?/, apenas “1” será encontrado</p>

<p>Ex. /bo*/
“Scoob doo” retorna “boooo”
“A bird warbled” retorna “b”
“A goat grunted” não tem retorno.</p>

<h3 id="-ponto-decimal">. Ponto Decimal</h3>

<p>(O ponto decimal) corresponde com qualquer caracter, exceto o caracter de nova linha. Ex. /.n/
“onde “ retorna “on”
“restantes” retorna “an”.
“nove” sem retorno.</p>

<h3 id="--parênteses">( ) Parênteses</h3>

<p>Os parênteses são usados para separar um grupo dentro da pesquisa, essa parte separada pode ser usada depois independentemente.</p>

<p>(X) Pesquisa correspondência com o caractere ‘x’ e memoriza-o, como a o exemplo a seguir mostra. Os parênteses são chamados parênteses de captura.Por exemplo, o ‘(foo)’ e ‘(bar)’ no padrão /(foo) (bar) \1 \2/ encontra e memoriza a primeira das duas palavras na string “foo bar foo bar”. O \1 e \2 no padrão combina as duas últimas palavras da string. Note que \1, \2, \n são utilizados na parte correspondente do regex.</p>

<p>(?:x) Pesquisa correspondência com o caractere ‘x’ porém não o memoriza. Os parênteses são chamados de parênteses de não-captura e permitem que você defina uma subexpressão para operadores de expressão regular trabalhar com eles. Considere essa expressão de exemplo /(?:foo){1,2}/. Se a expressão era /foo{1,2}/, o {1,2} poderia ser aplicado apenas para o último ‘o’ em ‘foo’. Com os parênteses de não-captura, o {1,2} é aplicado para toda a palavra ‘foo’.</p>

<table>
  <tbody>
    <tr>
      <td>x(?=y) Pesquisa correspondência em ‘x’ apenas se ‘x’ é seguido por ‘y’. Isso é chamado de lookahead.Por exemplo, /Jack(?=Sprat)/ busca ‘Jack’ apenas se é seguido por ‘Sprat’. /Jack(?=Sprat</td>
      <td>Frost)/ busca ‘Jack’ apenas se ele é seguido por ‘Sprat’ ou ‘Frost’. No entanto, ‘Sprat’ nem ‘Frost’ faz parte do resultado retornado.</td>
    </tr>
  </tbody>
</table>

<p>x(?!y) Pesquisa correspondência em ‘x’ apenas se ‘x’ não é seguido por ‘y’. Isso é chamado negação lookahead.Por exemplo, /\d+</p>

<p>(?!.)/ encontra um número apenas se ele não for seguido por um ponto decimal. A expressão regular /\d+(?!.)/.exec(“3.141”) encontra ‘141’ mas não ‘3.141’.</p>

<h3 id="-barra-vertical">| Barra Vertical</h3>

<p>##. Ponto Decimal
Permite alterna entre duas buscas tendo a mesma representação que um “ou” Ex. /gato | cachorro/
“o gato é dorminhoco “ retorna “gato”
“o cachorro é dorminhoco” retorna “cachorro”.</p>

<h3 id="--chaves">{ } Chaves</h3>

<p>Permite procurar uma quantidade de caracteres especificas. Ex. /a{2}/
“Sapo “ sem retorno
“Saapo” retorna “aa”
“saaaaaapo” retorna “aa” Ex. /a{1,3}/
“Sapo “ retorna “a”
“Saapo” retorna “aa”
“saaaaaapo” retorna “aaa”
[xyz] é basicamente o oposto de uma expressão literal /xyz/ onde esses essa ordem deve ser exata, com os colchetes [ ] qualquer um dos caracteres dentro retorna true, permitindo também a especificação de intervalos entre caracteres usando o hífen [a-z] por exemplo retorna qualquer letra entre de a até z
Caracteres especiais (como o ponto (.) e o asterisco(*)) não tem significado algum quando está dentro de um conjunto de caracteres. Não necessita utiliza escape neles. Mas, se utilizar escape também irá funcionar. Por exemplo, [abcd] é o mesmo que [a-d]. Com a expressão será encontrado o ‘b’ em “beijo” e o ‘c’ em “chop”. A expressão /[a-z.]+/ e /[\w.]+/ ambos encontraram as letras que formam “test.i.ng”.
[^xyz] Usar o circunflexo dentre de colchetes permite negar a expressão, ou seja torna válido tudo o que não estiver dentro dos colchetes.
Você pode especificar um intervalo de caracteres usando hífen e todas as funções permitidas dentro de colchetes.</p>

<h3 id="-barra-invertida">\ Barra Invertida</h3>

<p>Transforma caracteres simples em especiais, evitando que sejam interpretados de forma literal, e caracteres especiais em simples evitando que suas funções especiais sejam atribuídas, por esse motivo também é chamado de caractere de escape</p>

<h3 id="caracteres-normais-que-tem-funções-especias-com-">Caracteres normais que tem funções especias com \</h3>

<p>[\b] <em>Procura espaços em branco</em></p>

<p>\b <em>Procura a ‘fronteira’ dos caracteres, marcado seu inicio e fim.</em></p>

<p>\B <em>É o exato oposto de \b e retorna todas as posições que \b não retorna.</em></p>

<p>\cX <em>Detecta Caracteres de Controle ASCII onde X pode variar de A-Z ex: /\cI/ encontra espaços Tab</em></p>

<p>\d <em>Procura dígitos de 0-9 Equivalente a [0-9].</em></p>

<p>\D <em>Procura caracteres que não sejam dígitos Equivalente a [^0-9].</em></p>

<p>\f <em>Procura o caracter de escape Avanço de Página (Line Feed – LF)</em></p>

<p>\n <em>Procura quebra de linha.</em></p>

<p>\r <em>Procura caractere de escape “Retorno de Carro” que também é uma quebra de linha.</em></p>

<p>\s <em>Procura todas as correspondência com espaço, tabulação, avanço de página e quebra de linha.</em></p>

<p>\S <em>Procura por um caractere que não seja espaço em branco.</em></p>

<p>\t <em>Procura por tabelas</em></p>

<p>\v <em>Procura tabelas verticais</em></p>

<p>[A-Za-z0-9_]aasdfsdfasdfsdf\</p>

<p>\w <em>Procura por qualquer caractere alfanumérico incluindo underline. Equivalente [A-Za-z0-9_]</em></p>

<p>\W <em>Procura por não caracteres. Equivalente a [^a-za-z0-9_]</em></p>

<p>\num <em>Onde num é um inteiro positivo. Faz referência a substring pertencente à um grupo, um grupo é definido entre parênteses.
Grupos são numerados de 1 até 9.</em></p>

<p>\0 <em>Encontra correspondência em um caractere NULL (U+0000).</em></p>

<p>\xhh <em>Encontra correspondência com o código hh (dois valores hexadecimal).</em></p>

<p>\uhhhh <em>Encontra correspondência com o código hhh (três valores hexadecimal).</em></p>

<p>\u{hhhh} <em>(funciona apenas com a flag u) Encontra correspondência com o valor Unicode hhhh (dígitos hexadecimais).</em></p>

<p>Links úteis e fonts :</p>

<p><a href="https://www.regular-expressions.info/wordboundaries.html">https://www.regular-expressions.info/wordboundaries.html</a></p>

<p><a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions</a></p>

<p><a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp">https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name></name></author><category term="Javascript" /><category term="Regex" /><category term="Expressões Regulares" /><category term="RegExp" /><summary type="html"><![CDATA[Expressões Regulares são padrões utilizados para a filtragem e modificação de resultados que utilizam metacaracteres na construção de suas expressões Ex. * + ? $ ^ . () | \ { } [ ] Flags: g – Global Search m – Multiple lines i – insensitive case]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/posts/regexp-javascript.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/posts/regexp-javascript.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Customize the Favicon</title><link href="http://localhost:4000/blogging/tutorial/2019/08/10/customize-the-favicon.html" rel="alternate" type="text/html" title="Customize the Favicon" /><published>2019-08-10T13:34:00-03:00</published><updated>2019-08-10T13:34:00-03:00</updated><id>http://localhost:4000/blogging/tutorial/2019/08/10/customize-the-favicon</id><content type="html" xml:base="http://localhost:4000/blogging/tutorial/2019/08/10/customize-the-favicon.html"><![CDATA[<p>In <a href="https://github.com/cotes2020/jekyll-theme-chirpy/"><strong>Chirpy</strong></a>, the image files of <a href="https://www.favicon-generator.org/about/">Favicons</a> are placed in <code class="language-plaintext highlighter-rouge">assets/img/favicons/</code>. You may need to replace them with your own. So let’s see how to customize these Favicons.</p>

<p>With a square image (PNG, JPG or GIF) in hand, open the site <a href="https://www.favicon-generator.org/"><em>Favicon &amp; App Icon Generator</em></a> and upload your original image.</p>

<p><img src="/assets/img/sample/upload-image.png" alt="upload-image" /></p>

<p>Click button <kbd>Create Favicon</kbd> and wait a moment for the website to generate the icons of various sizes automatically.</p>

<p><img src="/assets/img/sample/download-icons.png" alt="download-icons" width="600" /></p>

<p>Download the generated package, unzip and delete the following two from the extracted files:</p>

<ul>
  <li>browserconfig.xml</li>
  <li>manifest.json</li>
</ul>

<p>Now, copy the remaining image files (<code class="language-plaintext highlighter-rouge">.PNG</code> and <code class="language-plaintext highlighter-rouge">.ICO</code>) from the extracted <code class="language-plaintext highlighter-rouge">.zip</code> file to cover the original files in the folder <code class="language-plaintext highlighter-rouge">assets/img/favicons/</code>.</p>

<p>The following table helps you understand the changes to the icon file:</p>

<blockquote>
  <p>✓ means keep, ✗ means delete.</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>File(s)</th>
      <th style="text-align: center">From Favicon &amp; App Icon Generator</th>
      <th style="text-align: center">From Chirpy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">*.PNG</code></td>
      <td style="text-align: center">✓</td>
      <td style="text-align: center">✗</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">*.ICO</code></td>
      <td style="text-align: center">✓</td>
      <td style="text-align: center">✗</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">browserconfig.xml</code></td>
      <td style="text-align: center">✗</td>
      <td style="text-align: center">✓</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">manifest.json</code></td>
      <td style="text-align: center">✗</td>
      <td style="text-align: center">✓</td>
    </tr>
  </tbody>
</table>

<p>The next time you build the site, the icon will be replaced with a customized edition.</p>]]></content><author><name>Cotes Chung</name></author><category term="Blogging" /><category term="Tutorial" /><category term="favicon" /><summary type="html"><![CDATA[In Chirpy, the image files of Favicons are placed in assets/img/favicons/. You may need to replace them with your own. So let’s see how to customize these Favicons. With a square image (PNG, JPG or GIF) in hand, open the site Favicon &amp; App Icon Generator and upload your original image. Click button Create Favicon and wait a moment for the website to generate the icons of various sizes automatically. Download the generated package, unzip and delete the following two from the extracted files: browserconfig.xml manifest.json Now, copy the remaining image files (.PNG and .ICO) from the extracted .zip file to cover the original files in the folder assets/img/favicons/. The following table helps you understand the changes to the icon file: ✓ means keep, ✗ means delete. File(s) From Favicon &amp; App Icon Generator From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ browserconfig.xml ✗ ✓ manifest.json ✗ ✓ The next time you build the site, the icon will be replaced with a customized edition.]]></summary></entry></feed>